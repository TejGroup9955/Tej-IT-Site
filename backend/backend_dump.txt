====== app.py ======
from flask import Flask, request, jsonify, render_template, flash, redirect, url_for, session
from flask_cors import CORS
from functools import wraps
import mysql.connector
from mysql.connector import Error
from datetime import datetime, timedelta
import jwt
import os
from dotenv import load_dotenv
from werkzeug.utils import secure_filename
import requests

app = Flask(__name__)
app.secret_key = os.getenv('SECRET_KEY', '2b8dd5a508de9870b120238f6588a138')
app.config['SESSION_TYPE'] = 'filesystem'
app.config['SESSION_FILE_DIR'] = os.path.join(os.path.dirname(__file__), 'flask_session')
app.config['PERMANENT_SESSION_LIFETIME'] = timedelta(hours=24)
CORS(app, supports_credentials=True, resources={r"/*": {"origins": os.getenv('FRONTEND_URL', 'http://10.10.50.93:3001')}})

UPLOAD_FOLDER = 'static/uploads'
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif', 'pdf', 'doc', 'docx'}

if not os.path.exists(app.config['UPLOAD_FOLDER']):
    os.makedirs(app.config['UPLOAD_FOLDER'])
    os.chmod(app.config['UPLOAD_FOLDER'], 0o775)

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def get_db_connection():
    try:
        return mysql.connector.connect(
            host=os.getenv('DB_HOST', '10.10.50.93'),
            port=int(os.getenv('DB_PORT', '3306')),
            user=os.getenv('DB_USER', 'testing'),
            password=os.getenv('DB_PASSWORD', 'testing@9955'),
            database=os.getenv('DB_NAME', 'tej_it_db')
        )
    except Error as e:
        print(f"Error connecting to MySQL: {e}")
        return None

def initialize_db():
    connection = get_db_connection()
    if not connection:
        print("Failed to connect to database for initialization")
        return
    cursor = connection.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INT AUTO_INCREMENT PRIMARY KEY,
            username VARCHAR(50) NOT NULL UNIQUE,
            password VARCHAR(255) NOT NULL
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS blogs (
            id INT AUTO_INCREMENT PRIMARY KEY,
            title VARCHAR(255) NOT NULL,
            content TEXT NOT NULL,
            image VARCHAR(255),
            date DATETIME NOT NULL,
            priority INT DEFAULT 0,
            category VARCHAR(50) DEFAULT 'General',
            excerpt TEXT,
            slug VARCHAR(255) UNIQUE,
            is_enabled BOOLEAN DEFAULT TRUE
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS testimonials (
            id INT AUTO_INCREMENT PRIMARY KEY,
            name VARCHAR(255) NOT NULL,
            company VARCHAR(255),
            content TEXT NOT NULL,
            rating INT DEFAULT 0,
            image VARCHAR(255),
            date DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
            is_enabled BOOLEAN DEFAULT TRUE
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS enquiries (
            id INT AUTO_INCREMENT PRIMARY KEY,
            name VARCHAR(100) NOT NULL,
            email VARCHAR(100) NOT NULL,
            phone VARCHAR(20),
            message TEXT NOT NULL,
            date DATETIME NOT NULL
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS teams (
            id INT AUTO_INCREMENT PRIMARY KEY,
            name VARCHAR(100) NOT NULL,
            role VARCHAR(100) NOT NULL,
            description VARCHAR(50),
            photo VARCHAR(255)
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS about_us (
            id INT AUTO_INCREMENT PRIMARY KEY,
            content TEXT NOT NULL
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS site_visits (
            id INT AUTO_INCREMENT PRIMARY KEY,
            ip_address VARCHAR(45) NOT NULL,
            country VARCHAR(100),
            visit_time DATETIME NOT NULL,
            session_id VARCHAR(255) NOT NULL,
            page VARCHAR(100) DEFAULT 'home'
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS departments (
            id INT AUTO_INCREMENT PRIMARY KEY,
            name VARCHAR(100) NOT NULL,
            status ENUM('Active', 'Inactive') DEFAULT 'Active',
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS jobs (
            id INT AUTO_INCREMENT PRIMARY KEY,
            title VARCHAR(100) NOT NULL,
            description TEXT NOT NULL,
            department_id INT,
            location VARCHAR(100) NOT NULL,
            type VARCHAR(50) NOT NULL,
            posted_by VARCHAR(50) NOT NULL,
            status ENUM('Active', 'Inactive') DEFAULT 'Active',
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (department_id) REFERENCES departments(id) ON DELETE SET NULL
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS job_applications (
            id INT AUTO_INCREMENT PRIMARY KEY,
            job_id INT NOT NULL,
            name VARCHAR(100) NOT NULL,
            email VARCHAR(100) NOT NULL,
            phone VARCHAR(20),
            resume VARCHAR(255),
            cover_letter TEXT,
            permanent_address TEXT,
            current_location VARCHAR(100),
            highest_education VARCHAR(100),
            skills TEXT,
            status ENUM('Pending', 'Reviewed', 'Hired', 'Rejected') DEFAULT 'Pending',
            applied_date DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (job_id) REFERENCES jobs(id) ON DELETE CASCADE
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS employee_testimonials (
            id INT AUTO_INCREMENT PRIMARY KEY,
            employee_name VARCHAR(255) NOT NULL,
            job_role VARCHAR(255) NOT NULL,
            feedback TEXT NOT NULL,
            rating INT NOT NULL,
            status BOOLEAN DEFAULT FALSE,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    """)
    cursor.execute("SELECT COUNT(*) FROM users")
    if cursor.fetchone()[0] == 0:
        cursor.execute("INSERT INTO users (username, password) VALUES (%s, %s)", ('admin', 'admin123'))
    cursor.execute("SELECT COUNT(*) FROM about_us")
    if cursor.fetchone()[0] == 0:
        cursor.execute("INSERT INTO about_us (content) VALUES (%s)", ('Default about us content.',))
    cursor.execute("SELECT COUNT(*) FROM departments")
    if cursor.fetchone()[0] == 0:
        cursor.execute("""
            INSERT INTO departments (name) VALUES
            ('HR'), ('Support'), ('Development'), ('Sales'), ('Marketing'),
            ('DevOps'), ('Cloud'), ('Back Office')
        """)
    connection.commit()
    cursor.close()
    connection.close()

def token_required(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        token = request.headers.get('Authorization')
        if not token:
            return jsonify({'error': 'Token is missing'}), 401
        try:
            data = jwt.decode(token, app.secret_key, algorithms=["HS256"])
            session['user_id'] = data['user_id']
        except:
            return jsonify({'error': 'Invalid token'}), 401
        return f(*args, **kwargs)
    return decorated

@app.route('/api/login', methods=['POST'])
def api_login():
    data = request.get_json()
    username = data.get('username')
    password = data.get('password')
    connection = get_db_connection()
    if not connection:
        return jsonify({'error': 'DB connection failed'}), 500
    cursor = connection.cursor(dictionary=True)
    cursor.execute("SELECT * FROM users WHERE username = %s", (username,))
    user = cursor.fetchone()
    cursor.close()
    connection.close()
    if user and user['password'] == password:
        token = jwt.encode({'user_id': user['id']}, app.secret_key, algorithm='HS256')
        session['user_id'] = user['id']
        session.permanent = True
        return jsonify({'token': token, 'message': 'Login successful'})
    return jsonify({'error': 'Login failed: Invalid credentials'}), 401

@app.route('/admin/login', methods=['GET', 'POST'])
def admin_login():
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        connection = get_db_connection()
        if not connection:
            flash('Database connection failed', 'danger')
            return redirect(url_for('admin_login'))
        cursor = connection.cursor(dictionary=True)
        cursor.execute("SELECT * FROM users WHERE username = %s", (username,))
        user = cursor.fetchone()
        cursor.close()
        connection.close()
        if user and user['password'] == password:
            session['user_id'] = user['id']
            session.permanent = True
            flash('Login successful', 'success')
            return redirect(url_for('admin_dashboard'))
        flash('Invalid credentials', 'danger')
    return render_template('login.html')

@app.route('/admin/logout')
def admin_logout():
    session.pop('user_id', None)
    flash('Logged out successfully', 'success')
    return redirect(url_for('admin_login'))

@app.route('/admin/dashboard')
def admin_dashboard():
    if 'user_id' not in session:
        flash('Please login first', 'danger')
        return redirect(url_for('admin_login'))
    connection = get_db_connection()
    if not connection:
        flash('Database connection failed', 'danger')
        return redirect(url_for('admin_dashboard'))
    cursor = connection.cursor(dictionary=True)
    cursor.execute("SELECT COUNT(*) as count FROM blogs")
    blog_count = cursor.fetchone()['count']
    cursor.execute("SELECT COUNT(*) as count FROM testimonials")
    testimonial_count = cursor.fetchone()['count']
    cursor.execute("SELECT COUNT(*) as count FROM enquiries")
    enquiry_count = cursor.fetchone()['count']
    cursor.execute("SELECT COUNT(*) as count FROM teams")
    team_count = cursor.fetchone()['count']
    cursor.execute("SELECT COUNT(*) as count FROM jobs")
    job_count = cursor.fetchone()['count']
    cursor.execute("SELECT COUNT(*) as count FROM job_applications")
    application_count = cursor.fetchone()['count']
    cursor.execute("SELECT COUNT(*) as count FROM departments")
    department_count = cursor.fetchone()['count']
    cursor.execute("SELECT COUNT(*) as count FROM site_visits")
    visit_count = cursor.fetchone()['count']
    cursor.execute("SELECT country, COUNT(*) as count FROM site_visits GROUP BY country ORDER BY count DESC LIMIT 5")
    top_countries = cursor.fetchall()
    cursor.execute("SELECT page, COUNT(*) as count FROM site_visits GROUP BY page ORDER BY count DESC LIMIT 5")
    top_pages = cursor.fetchall()
    cursor.close()
    connection.close()
    return render_template('dashboard.html', blog_count=blog_count, testimonial_count=testimonial_count,
                          enquiry_count=enquiry_count, team_count=team_count, job_count=job_count,
                          application_count=application_count, department_count=department_count,
                          visit_count=visit_count, top_countries=top_countries, top_pages=top_pages)

@app.route('/admin/blogs')
def admin_blogs():
    if 'user_id' not in session:
        flash('Please login first', 'danger')
        return redirect(url_for('admin_login'))
    connection = get_db_connection()
    if not connection:
        flash('Database connection failed', 'danger')
        return redirect(url_for('admin_blogs'))
    cursor = connection.cursor(dictionary=True)
    cursor.execute("SELECT * FROM blogs ORDER BY date DESC")
    blogs = cursor.fetchall()
    cursor.close()
    connection.close()
    return render_template('blogs_list.html', blogs=blogs)

@app.route('/admin/blog/new', methods=['GET', 'POST'])
def admin_blog_new():
    if 'user_id' not in session:
        flash('Please login first', 'danger')
        return redirect(url_for('admin_login'))
    if request.method == 'POST':
        title = request.form.get('title')
        content = request.form.get('content')
        priority = request.form.get('priority', 0)
        category = request.form.get('category', 'General')
        excerpt = request.form.get('excerpt', content[:200] if content else '')
        sequence = request.form.get('sequence', 0)
        slug = request.form.get('slug') or title.lower().replace(' ', '-').replace('/', '-') if title else ''
        is_enabled = 'is_enabled' in request.form
        image = request.files.get('image')
        image_path = None
        if image and allowed_file(image.filename):
            filename = secure_filename(image.filename)
            image_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            image.save(image_path)
            image_path = f'http://10.10.50.93:5000/static/uploads/{filename}'
        connection = get_db_connection()
        if not connection:
            flash('Database connection failed', 'danger')
            return redirect(url_for('admin_blog_new'))
        cursor = connection.cursor()
        try:
            cursor.execute("INSERT INTO blogs (title, content, image, date, priority, category, excerpt, slug, is_enabled, sequence) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)",
                           (title, content, image_path, datetime.now(), priority, category, excerpt, slug, is_enabled, sequence))
            connection.commit()
            flash('Blog created successfully', 'success')
        except Error as e:
            print(f"Error inserting blog: {e}")
            flash('Failed to create blog due to database error', 'danger')
        finally:
            cursor.close()
            connection.close()
        return redirect(url_for('admin_blogs'))
    default_blog = {'is_enabled': True}
    return render_template('blog_form.html', action='Create', categories=['General', 'ERP', 'BDM', 'Payroll', 'Cloud Services'], blog=default_blog)

@app.route('/admin/blog/edit/<int:id>', methods=['GET', 'POST'])
def admin_blog_edit(id):
    if 'user_id' not in session:
        flash('Please login first', 'danger')
        return redirect(url_for('admin_login'))
    connection = get_db_connection()
    if not connection:
        flash('Database connection failed', 'danger')
        return redirect(url_for('admin_blogs'))
    cursor = connection.cursor(dictionary=True)
    cursor.execute("SELECT * FROM blogs WHERE id = %s", (id,))
    blog = cursor.fetchone()
    if not blog:
        cursor.close()
        connection.close()
        flash('Blog not found', 'danger')
        return redirect(url_for('admin_blogs'))
    if request.method == 'POST':
        title = request.form.get('title')
        content = request.form.get('content')
        priority = request.form.get('priority', 0)
        category = request.form.get('category', 'General')
        excerpt = request.form.get('excerpt', content[:200] if content else '')
        sequence = request.form.get('sequence', 0)
        slug = request.form.get('slug') or title.lower().replace(' ', '-').replace('/', '-') if title else ''
        is_enabled = 'is_enabled' in request.form
        image = request.files.get('image')
        image_path = blog['image']
        if image and allowed_file(image.filename):
            filename = secure_filename(image.filename)
            image_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            image.save(image_path)
            image_path = f'http://10.10.50.93:5000/static/uploads/{filename}'
        try:
            cursor.execute("UPDATE blogs SET title = %s, content = %s, image = %s, priority = %s, category = %s, excerpt = %s, slug = %s, is_enabled = %s, sequence = %s WHERE id = %s",
                           (title, content, image_path, priority, category, excerpt, slug, is_enabled, sequence, id))
            connection.commit()
            flash('Blog updated successfully', 'success')
        except Error as e:
            print(f"Error updating blog: {e}")
            flash('Failed to update blog due to database error', 'danger')
        finally:
            cursor.close()
            connection.close()
        return redirect(url_for('admin_blogs'))
    cursor.close()
    connection.close()
    return render_template('blog_form.html', blog=blog, action='Edit', categories=['General', 'ERP', 'BDM', 'Payroll', 'Cloud Services'])

@app.route('/admin/blog/delete/<int:id>')
def admin_blog_delete(id):
    if 'user_id' not in session:
        flash('Please login first', 'danger')
        return redirect(url_for('admin_login'))
    connection = get_db_connection()
    if not connection:
        flash('Database connection failed', 'danger')
        return redirect(url_for('admin_blogs'))
    cursor = connection.cursor()
    try:
        cursor.execute("DELETE FROM blogs WHERE id = %s", (id,))
        connection.commit()
        flash('Blog deleted successfully', 'success')
    except Error as e:
        print(f"Error deleting blog: {e}")
        flash('Failed to delete blog due to database error', 'danger')
    finally:
        cursor.close()
        connection.close()
    return redirect(url_for('admin_blogs'))

@app.route('/api/blogs', methods=['GET'])
def get_blogs():
    connection = get_db_connection()
    if not connection:
        return jsonify({'error': 'DB connection failed'}), 500
    cursor = connection.cursor(dictionary=True)
    category = request.args.get('category', 'All')
    search = request.args.get('search', '')
    try:
        query = "SELECT * FROM blogs WHERE is_enabled = TRUE"
        params = []
        if category != 'All':
            query += " AND category = %s"
            params.append(category)
        if search:
            query += " AND (title LIKE %s OR content LIKE %s)"
            params.extend([f'%{search}%', f'%{search}%'])
        query += " ORDER BY priority DESC, date DESC"
        cursor.execute(query, params)
        blogs = cursor.fetchall()
    except Error as e:
        print(f"Error fetching blogs: {e}")
        return jsonify({'error': 'Failed to fetch blogs'}), 500
    finally:
        cursor.close()
        connection.close()
    return jsonify(blogs)

@app.route('/api/blogs/<slug>', methods=['GET'])
def get_blog_by_slug(slug):
    connection = get_db_connection()
    if not connection:
        return jsonify({'error': 'DB connection failed'}), 500
    cursor = connection.cursor(dictionary=True)
    try:
        cursor.execute("SELECT * FROM blogs WHERE slug = %s AND is_enabled = TRUE", (slug,))
        blog = cursor.fetchone()
        if not blog:
            return jsonify({'error': 'Blog not found'}), 404
    except Error as e:
        print(f"Error fetching blog: {e}")
        return jsonify({'error': 'Failed to fetch blog'}), 500
    finally:
        cursor.close()
        connection.close()
    return jsonify(blog)

@app.route('/admin/toggle_blog', methods=['POST'])
def toggle_blog():
    if 'user_id' not in session:
        return jsonify({'success': False, 'message': 'Unauthorized'}), 401
    data = request.get_json()
    id = data.get('id')
    is_enabled = data.get('is_enabled')
    connection = get_db_connection()
    if not connection:
        return jsonify({'success': False, 'message': 'Database connection failed'}), 500
    cursor = connection.cursor()
    try:
        cursor.execute("UPDATE blogs SET is_enabled = %s WHERE id = %s", (is_enabled, id))
        connection.commit()
        return jsonify({'success': True})
    except Error as e:
        print(f"Error toggling blog: {e}")
        connection.rollback()
        return jsonify({'success': False, 'message': 'Failed to toggle blog'}), 500
    finally:
        cursor.close()
        connection.close()

@app.route('/admin/testimonial/new', methods=['GET', 'POST'])
def admin_testimonial_new():
    if 'user_id' not in session:
        flash('Please login first', 'danger')
        return redirect(url_for('admin_login'))
    if request.method == 'POST':
        name = request.form.get('name')
        job_role = request.form.get('job_role')
        content = request.form.get('content')
        uploaded_by = session.get('user_id', 'admin')
        is_enabled = 'is_enabled' in request.form
        image = request.files.get('image')
        image_path = None
        if image and allowed_file(image.filename):
            filename = secure_filename(image.filename)
            image_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            image.save(image_path)
            image_path = f'http://10.10.50.93:5000/static/uploads/{filename}'
        connection = get_db_connection()
        if not connection:
            flash('Database connection failed', 'danger')
            return redirect(url_for('admin_testimonial_new'))
        cursor = connection.cursor()
        try:
            cursor.execute("INSERT INTO testimonials (name, job_role, content, image, date, is_enabled, uploaded_by) VALUES (%s, %s, %s, %s, %s, %s, %s)",
                           (name, job_role, content, image_path, datetime.now(), is_enabled, uploaded_by))
            connection.commit()
            flash('Testimonial created successfully', 'success')
        except Error as e:
            print(f"Error inserting testimonial: {e}")
            flash('Failed to create testimonial due to database error', 'danger')
        finally:
            cursor.close()
            connection.close()
        return redirect(url_for('admin_testimonials'))
    default_testimonial = {'is_enabled': True}
    return render_template('testimonial_form.html', action='Create', testimonial=default_testimonial)

@app.route('/api/submit_testimonial', methods=['POST'])
def submit_testimonial():
    name = request.form.get('name')
    job_role = request.form.get('job_role')
    content = request.form.get('content')
    uploaded_by = 'anonymous'
    image = request.files.get('image')
    image_path = None
    if image and allowed_file(image.filename):
        filename = secure_filename(image.filename)
        image_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        image.save(image_path)
        image_path = f'http://10.10.50.93:5000/static/uploads/{filename}'
    connection = get_db_connection()
    if not connection:
        return jsonify({'success': False, 'message': 'Database connection failed'}), 500
    cursor = connection.cursor()
    try:
        cursor.execute("INSERT INTO testimonials (name, job_role, content, image, date, uploaded_by) VALUES (%s, %s, %s, %s, %s, %s)",
                       (name, job_role, content, image_path, datetime.now(), uploaded_by))
        connection.commit()
        return jsonify({'success': True, 'message': 'Testimonial submitted successfully'}), 200
    except Error as e:
        print(f"Error submitting testimonial: {e}")
        connection.rollback()
        return jsonify({'success': False, 'message': 'Failed to submit testimonial'}), 500
    finally:
        cursor.close()
        connection.close()

@app.route('/api/testimonials', methods=['GET'])
def get_testimonials():
    connection = get_db_connection()
    if not connection:
        return jsonify({'error': 'DB connection failed'}), 500
    cursor = connection.cursor(dictionary=True)
    try:
        cursor.execute("SELECT * FROM testimonials WHERE is_enabled = TRUE ORDER BY date DESC")
        testimonials = cursor.fetchall()
    except Error as e:
        print(f"Error fetching testimonials: {e}")
        return jsonify({'error': 'Failed to fetch testimonials'}), 500
    finally:
        cursor.close()
        connection.close()
    return jsonify(testimonials)

@app.route('/api/teams', methods=['GET'])
@token_required
def get_teams():
    connection = get_db_connection()
    if not connection:
        return jsonify({'error': 'DB connection failed'}), 500
    cursor = connection.cursor(dictionary=True)
    try:
        cursor.execute("SELECT * FROM teams")
        teams = cursor.fetchall()
    except Error as e:
        print(f"Error fetching teams: {e}")
        return jsonify({'error': 'Failed to fetch teams'}), 500
    finally:
        cursor.close()
        connection.close()
    return jsonify(teams)

@app.route('/api/about_us', methods=['GET'])
@token_required
def get_about_us():
    connection = get_db_connection()
    if not connection:
        return jsonify({'error': 'DB connection failed'}), 500
    cursor = connection.cursor(dictionary=True)
    try:
        cursor.execute("SELECT * FROM about_us LIMIT 1")
        about = cursor.fetchone()
    except Error as e:
        print(f"Error fetching about us: {e}")
        return jsonify({'error': 'Failed to fetch about us'}), 500
    finally:
        cursor.close()
        connection.close()
    return jsonify(about)

@app.route('/admin/testimonials')
def admin_testimonials():
    if 'user_id' not in session:
        flash('Please login first', 'danger')
        return redirect(url_for('admin_login'))
    connection = get_db_connection()
    if not connection:
        flash('Database connection failed', 'danger')
        return redirect(url_for('admin_dashboard'))
    cursor = connection.cursor(dictionary=True)
    cursor.execute("SELECT * FROM testimonials ORDER BY date DESC")
    testimonials = cursor.fetchall()
    cursor.close()
    connection.close()
    return render_template('admin_testimonials.html', testimonials=testimonials)

@app.route('/admin/testimonial/edit/<int:id>', methods=['GET', 'POST'])
def admin_testimonial_edit(id):
    if 'user_id' not in session:
        flash('Please login first', 'danger')
        return redirect(url_for('admin_login'))
    connection = get_db_connection()
    if not connection:
        flash('Database connection failed', 'danger')
        return redirect(url_for('admin_testimonials'))
    cursor = connection.cursor(dictionary=True)
    cursor.execute("SELECT * FROM testimonials WHERE id = %s", (id,))
    testimonial = cursor.fetchone()
    if not testimonial:
        cursor.close()
        connection.close()
        flash('Testimonial not found', 'danger')
        return redirect(url_for('admin_testimonials'))
    if request.method == 'POST':
        name = request.form.get('name')
        job_role = request.form.get('job_role')
        content = request.form.get('content')
        uploaded_by = session.get('user_id', 'admin')
        is_enabled = 'is_enabled' in request.form
        image = request.files.get('image')
        image_path = testimonial['image']
        if image and allowed_file(image.filename):
            filename = secure_filename(image.filename)
            image_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            image.save(image_path)
            image_path = f'http://10.10.50.93:5000/static/uploads/{filename}'
        try:
            cursor.execute("UPDATE testimonials SET name = %s, job_role = %s, content = %s, image = %s, is_enabled = %s, uploaded_by = %s WHERE id = %s",
                           (name, job_role, content, image_path, is_enabled, uploaded_by, id))
            connection.commit()
            flash('Testimonial updated successfully', 'success')
        except Error as e:
            print(f"Error updating testimonial: {e}")
            flash('Failed to update testimonial due to database error', 'danger')
        finally:
            cursor.close()
            connection.close()
        return redirect(url_for('admin_testimonials'))
    cursor.close()
    connection.close()
    return render_template('testimonial_form.html', testimonial=testimonial, action='Edit')

@app.route('/admin/toggle_testimonial', methods=['POST'])
def toggle_testimonial():
    if 'user_id' not in session:
        return jsonify({'success': False, 'message': 'Unauthorized'}), 401
    data = request.get_json()
    id = data.get('id')
    is_enabled = data.get('is_enabled')
    connection = get_db_connection()
    if not connection:
        return jsonify({'success': False, 'message': 'Database connection failed'}), 500
    cursor = connection.cursor()
    try:
        cursor.execute("UPDATE testimonials SET is_enabled = %s WHERE id = %s", (is_enabled, id))
        connection.commit()
        return jsonify({'success': True})
    except Error as e:
        print(f"Error toggling testimonial: {e}")
        connection.rollback()
        return jsonify({'success': False, 'message': 'Failed to toggle testimonial'}), 500
    finally:
        cursor.close()
        connection.close()

@app.route('/admin/testimonial/delete/<int:id>', methods=['POST'])
def admin_testimonial_delete(id):
    if 'user_id' not in session:
        flash('Please login first', 'danger')
        return redirect(url_for('admin_login'))
    connection = get_db_connection()
    if not connection:
        flash('Database connection failed', 'danger')
        return redirect(url_for('admin_testimonials'))
    cursor = connection.cursor()
    try:
        cursor.execute("DELETE FROM testimonials WHERE id = %s", (id,))
        connection.commit()
        flash('Testimonial deleted successfully', 'success')
    except Error as e:
        print(f"Error deleting testimonial: {e}")
        flash('Failed to delete testimonial due to database error', 'danger')
    finally:
        cursor.close()
        connection.close()
    return redirect(url_for('admin_testimonials'))

@app.route('/api/enquiries', methods=['OPTIONS', 'POST'])
def add_enquiry():
    if request.method == 'OPTIONS':
        response = app.make_default_options_response()
        return response
    connection = get_db_connection()
    if not connection:
        return jsonify({'error': 'DB connection failed'}), 500
    cursor = connection.cursor()
    try:
        data = request.get_json()
        name = data.get('name')
        email = data.get('email')
        phone = data.get('phone')
        message = data.get('message')
        date = datetime.utcnow()
        cursor.execute("INSERT INTO enquiries (name, email, phone, message, date) VALUES (%s, %s, %s, %s, %s)",
                       (name, email, phone, message, date))
        connection.commit()
        return jsonify({'message': 'Enquiry submitted successfully'}), 200
    except Error as e:
        print(f"Error submitting enquiry: {e}")
        connection.rollback()
        return jsonify({'error': 'Failed to submit enquiry'}), 500
    finally:
        cursor.close()
        connection.close()

@app.route('/admin/enquiries')
def admin_enquiries():
    if 'user_id' not in session:
        flash('Please login first', 'danger')
        return redirect(url_for('admin_login'))
    connection = get_db_connection()
    if not connection:
        flash('Database connection failed', 'danger')
        return redirect(url_for('admin_enquiries'))
    cursor = connection.cursor(dictionary=True)
    try:
        cursor.execute("SELECT * FROM enquiries ORDER BY date DESC")
        enquiries = cursor.fetchall()
    except Error as e:
        print(f"Error fetching enquiries: {e}")
        flash('Failed to fetch enquiries', 'danger')
    finally:
        cursor.close()
        connection.close()
    return render_template('enquiries_list.html', enquiries=enquiries)

@app.route('/admin/teams')
def admin_teams():
    if 'user_id' not in session:
        flash('Please login first', 'danger')
        return redirect(url_for('admin_login'))
    connection = get_db_connection()
    if not connection:
        flash('Database connection failed', 'danger')
        return redirect(url_for('admin_teams'))
    cursor = connection.cursor(dictionary=True)
    try:
        cursor.execute("SELECT * FROM teams")
        teams = cursor.fetchall()
    except Error as e:
        print(f"Error fetching teams: {e}")
        flash('Failed to fetch teams', 'danger')
    finally:
        cursor.close()
        connection.close()
    return render_template('teams_list.html', teams=teams)

@app.route('/admin/team/new', methods=['GET', 'POST'])
def admin_team_new():
    if 'user_id' not in session:
        flash('Please login first', 'danger')
        return redirect(url_for('admin_login'))
    if request.method == 'POST':
        name = request.form.get('name')
        role = request.form.get('role')
        description = request.form.get('description')
        photo = request.files.get('photo')
        photo_path = None
        if photo and allowed_file(photo.filename):
            try:
                filename = secure_filename(photo.filename)
                photo_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
                photo.save(photo_path)
                photo_path = f'http://10.10.50.93:5000/static/uploads/{filename}'
            except Exception as e:
                print(f"Error saving photo: {e}")
                flash('Failed to upload photo', 'danger')
                return redirect(url_for('admin_team_new'))
        connection = get_db_connection()
        if not connection:
            flash('Database connection failed', 'danger')
            return redirect(url_for('admin_team_new'))
        cursor = connection.cursor()
        try:
            cursor.execute("INSERT INTO teams (name, role, description, photo) VALUES (%s, %s, %s, %s)",
                           (name, role, description, photo_path))
            connection.commit()
            flash('Team member added successfully', 'success')
        except Error as e:
            print(f"Error adding team member: {e}")
            flash('Failed to add team member due to database error', 'danger')
        finally:
            cursor.close()
            connection.close()
        return redirect(url_for('admin_teams'))
    return render_template('team_form.html', action='Add')

@app.route('/admin/team/edit/<int:id>', methods=['GET', 'POST'])
def admin_team_edit(id):
    if 'user_id' not in session:
        flash('Please login first', 'danger')
        return redirect(url_for('admin_login'))
    connection = get_db_connection()
    if not connection:
        flash('Database connection failed', 'danger')
        return redirect(url_for('admin_teams'))
    cursor = connection.cursor(dictionary=True)
    try:
        cursor.execute("SELECT * FROM teams WHERE id = %s", (id,))
        team = cursor.fetchone()
        if not team:
            flash('Team member not found', 'danger')
            return redirect(url_for('admin_teams'))
    except Error as e:
        print(f"Error fetching team member: {e}")
        flash('Failed to fetch team member', 'danger')
        cursor.close()
        connection.close()
        return redirect(url_for('admin_teams'))
    if request.method == 'POST':
        name = request.form.get('name')
        role = request.form.get('role')
        description = request.form.get('description')
        photo = request.files.get('photo')
        photo_path = team['photo']
        if photo and allowed_file(photo.filename):
            try:
                filename = secure_filename(photo.filename)
                photo_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
                photo.save(photo_path)
                photo_path = f'http://10.10.50.93:5000/static/uploads/{filename}'
            except Exception as e:
                print(f"Error saving photo: {e}")
                flash('Failed to upload photo', 'danger')
                return redirect(url_for('admin_team_edit', id=id))
        try:
            cursor.execute("UPDATE teams SET name = %s, role = %s, description = %s, photo = %s WHERE id = %s",
                           (name, role, description, photo_path, id))
            connection.commit()
            flash('Team member updated successfully', 'success')
        except Error as e:
            print(f"Error updating team member: {e}")
            flash('Failed to update team member due to database error', 'danger')
        finally:
            cursor.close()
            connection.close()
        return redirect(url_for('admin_teams'))
    cursor.close()
    connection.close()
    return render_template('team_form.html', team=team, action='Edit')

@app.route('/admin/team/delete/<int:id>')
def admin_team_delete(id):
    if 'user_id' not in session:
        flash('Please login first', 'danger')
        return redirect(url_for('admin_login'))
    connection = get_db_connection()
    if not connection:
        flash('Database connection failed', 'danger')
        return redirect(url_for('admin_teams'))
    cursor = connection.cursor()
    try:
        cursor.execute("DELETE FROM teams WHERE id = %s", (id,))
        connection.commit()
        flash('Team member deleted successfully', 'success')
    except Error as e:
        print(f"Error deleting team member: {e}")
        flash('Failed to delete team member due to database error', 'danger')
    finally:
        cursor.close()
        connection.close()
    return redirect(url_for('admin_teams'))

@app.route('/admin/about_us', methods=['GET', 'POST'])
def admin_about_us():
    if 'user_id' not in session:
        flash('Please login first', 'danger')
        return redirect(url_for('admin_login'))
    connection = get_db_connection()
    if not connection:
        flash('Database connection failed', 'danger')
        return redirect(url_for('admin_about_us'))
    cursor = connection.cursor(dictionary=True)
    try:
        cursor.execute("SELECT * FROM about_us LIMIT 1")
        about = cursor.fetchone()
    except Error as e:
        print(f"Error fetching about us: {e}")
        flash('Failed to fetch about us content', 'danger')
        cursor.close()
        connection.close()
        return redirect(url_for('admin_about_us'))
    if request.method == 'POST':
        content = request.form.get('content')
        try:
            cursor.execute("UPDATE about_us SET content = %s WHERE id = %s", (content, about['id']))
            connection.commit()
            flash('About Us updated successfully', 'success')
        except Error as e:
            print(f"Error updating about us: {e}")
            flash('Failed to update about us content', 'danger')
        finally:
            cursor.close()
            connection.close()
        return redirect(url_for('admin_about_us'))
    cursor.close()
    connection.close()
    return render_template('about_form.html', about=about)

@app.route('/track_visit')
def track_visit():
    ip_address = request.remote_addr
    page = request.args.get('page', 'home')
    session_id = session.get('visit_session_id')
    if not session_id:
        session_id = os.urandom(16).hex()
        session['visit_session_id'] = session_id
        try:
            response = requests.get(f"https://ipapi.co/{ip_address}/json/")
            print(f"ipapi.co response for {ip_address}: {response.status_code}, {response.text}")
            if response.status_code == 200:
                data = response.json()
                country = data.get('country_name', 'Unknown')
            else:
                country = 'Unknown'
        except Exception as e:
            print(f"Error fetching geolocation for {ip_address}: {e}")
            country = 'Unknown'
        connection = get_db_connection()
        if connection:
            cursor = connection.cursor()
            try:
                cursor.execute("INSERT INTO site_visits (ip_address, country, visit_time, session_id, page) VALUES (%s, %s, %s, %s, %s)",
                               (ip_address, country, datetime.now(), session_id, page))
                connection.commit()
            except Error as e:
                print(f"Error inserting visit: {e}")
            finally:
                cursor.close()
                connection.close()
        else:
            print("Failed to connect to database for tracking visit")
    return '', 204

@app.route('/api/departments', methods=['GET'])
def get_departments():
    connection = get_db_connection()
    if not connection:
        return jsonify({'error': 'DB connection failed'}), 500
    cursor = connection.cursor(dictionary=True)
    try:
        cursor.execute("SELECT * FROM departments WHERE status = 'Active' ORDER BY name")
        departments = cursor.fetchall()
    except Error as e:
        print(f"Error fetching departments: {e}")
        return jsonify({'error': 'Failed to fetch departments'}), 500
    finally:
        cursor.close()
        connection.close()
    return jsonify(departments)

@app.route('/api/jobs/<int:id>', methods=['GET'])
def get_job(id):
    connection = get_db_connection()
    if not connection:
        return jsonify({'error': 'DB connection failed'}), 500
    cursor = connection.cursor(dictionary=True)
    try:
        cursor.execute("SELECT j.*, d.name AS department FROM jobs j LEFT JOIN departments d ON j.department_id = d.id WHERE j.id = %s", (id,))
        job = cursor.fetchone()
        if not job:
            return jsonify({'error': 'Job not found'}), 404
        return jsonify(job)
    except Error as e:
        print(f"Error fetching job: {e}")
        return jsonify({'error': 'Failed to fetch job'}), 500
    finally:
        cursor.close()
        connection.close()

@app.route('/api/job-openings', methods=['GET'])
def get_job_openings():
    connection = get_db_connection()
    if not connection:
        return jsonify({'error': 'DB connection failed'}), 500
    cursor = connection.cursor(dictionary=True)
    department = request.args.get('department', 'All')
    location = request.args.get('location', 'All')
    try:
        query = "SELECT j.*, d.name AS department FROM jobs j LEFT JOIN departments d ON j.department_id = d.id WHERE j.status = 'Active'"
        params = []
        if department != 'All':
            query += " AND d.name = %s"
            params.append(department)
        if location != 'All':
            query += " AND j.location = %s"
            params.append(location)
        query += " ORDER BY j.posted_date DESC"
        cursor.execute(query, params)
        jobs = cursor.fetchall()
        print(f"API /job-openings fetched jobs: {jobs}")
    except Error as e:
        print(f"Error fetching jobs: {e}")
        return jsonify({'error': 'Failed to fetch jobs'}), 500
    finally:
        cursor.close()
        connection.close()
    return jsonify(jobs)

@app.route('/api/job/add', methods=['POST'])
@token_required
def add_job():
    if 'user_id' not in session:
        return jsonify({'success': False, 'message': 'Unauthorized'}), 401
    title = request.form.get('title')
    description = request.form.get('description')
    department_id = request.form.get('department_id')
    location = request.form.get('location')
    type = request.form.get('type')
    posted_by = session.get('user_id', 'admin')
    connection = get_db_connection()
    if not connection:
        return jsonify({'success': False, 'message': 'Database connection failed'}), 500
    cursor = connection.cursor()
    try:
        cursor.execute("INSERT INTO jobs (title, description, department_id, location, type, posted_by, created_at) VALUES (%s, %s, %s, %s, %s, %s, %s)",
                       (title, description, department_id, location, type, posted_by, datetime.now()))
        connection.commit()
        return jsonify({'success': True, 'message': 'Job added successfully'}), 200
    except Error as e:
        print(f"Error inserting job: {e}")
        connection.rollback()
        return jsonify({'success': False, 'message': 'Failed to add job'}), 500
    finally:
        cursor.close()
        connection.close()

@app.route('/api/testimonial/add', methods=['POST'])
@token_required
def add_testimonial():
    if 'user_id' not in session:
        return jsonify({'success': False, 'message': 'Unauthorized'}), 401
    name = request.form.get('name')
    job_role = request.form.get('job_role')
    content = request.form.get('content')
    uploaded_by = session.get('user_id', 'admin')
    is_enabled = request.form.get('is_enabled', 'false') == 'true'
    image = request.files.get('image')
    image_path = None
    if image and allowed_file(image.filename):
        filename = secure_filename(image.filename)
        image_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        image.save(image_path)
        image_path = f'http://10.10.50.93:5000/static/uploads/{filename}'
    connection = get_db_connection()
    if not connection:
        return jsonify({'success': False, 'message': 'Database connection failed'}), 500
    cursor = connection.cursor()
    try:
        cursor.execute("INSERT INTO testimonials (name, job_role, content, image, date, is_enabled, uploaded_by) VALUES (%s, %s, %s, %s, %s, %s, %s)",
                       (name, job_role, content, image_path, datetime.now(), is_enabled, uploaded_by))
        connection.commit()
        return jsonify({'success': True, 'message': 'Testimonial added successfully'}), 200
    except Error as e:
        print(f"Error inserting testimonial: {e}")
        connection.rollback()
        return jsonify({'success': False, 'message': 'Failed to add testimonial'}), 500
    finally:
        cursor.close()
        connection.close()

@app.route('/api/employee_testimonials', methods=['GET'])
def get_employee_testimonials():
    connection = get_db_connection()
    if not connection:
        print("Database connection failed")
        return jsonify({'success': False, 'message': 'Database connection failed'}), 500
    cursor = connection.cursor(dictionary=True)
    try:
        cursor.execute("SELECT id, employee_name, job_role, feedback, rating, status, created_at FROM employee_testimonials WHERE status = TRUE")
        testimonials = cursor.fetchall()
        print(f"Fetched testimonials: {testimonials}")  # Debug log
        return jsonify(testimonials), 200
    except Error as e:
        print(f"Error fetching employee testimonials: {e}")
        return jsonify({'success': False, 'message': 'Failed to fetch employee testimonials'}), 500
    finally:
        cursor.close()
        connection.close()

@app.route('/admin/departments')
def admin_departments():
    if 'user_id' not in session:
        flash('Please login first', 'danger')
        return redirect(url_for('admin_login'))
    connection = get_db_connection()
    if not connection:
        flash('Database connection failed', 'danger')
        return redirect(url_for('admin_departments'))
    cursor = connection.cursor(dictionary=True)
    try:
        cursor.execute("SELECT * FROM departments ORDER BY name")
        departments = cursor.fetchall()
    except Error as e:
        print(f"Error fetching departments: {e}")
        flash('Failed to fetch departments', 'danger')
        departments = []
    finally:
        cursor.close()
        connection.close()
    return render_template('departments_list.html', departments=departments)

@app.route('/admin/department/new', methods=['GET', 'POST'])
def admin_department_new():
    if 'user_id' not in session:
        flash('Please login first', 'danger')
        return redirect(url_for('admin_login'))
    if request.method == 'POST':
        name = request.form.get('name')
        status = request.form.get('status', 'Active')
        connection = get_db_connection()
        if not connection:
            flash('Database connection failed', 'danger')
            return redirect(url_for('admin_department_new'))
        cursor = connection.cursor()
        try:
            cursor.execute("INSERT INTO departments (name, status, created_at) VALUES (%s, %s, %s)",
                           (name, status, datetime.now()))
            connection.commit()
            flash('Department added successfully', 'success')
        except Error as e:
            print(f"Error inserting department: {e}")
            flash('Failed to add department due to database error', 'danger')
        finally:
            cursor.close()
            connection.close()
        return redirect(url_for('admin_departments'))
    return render_template('department_form.html', action='Add', department={'name': '', 'status': 'Active'})

@app.route('/admin/department/edit/<int:id>', methods=['GET', 'POST'])
def admin_department_edit(id):
    if 'user_id' not in session:
        flash('Please login first', 'danger')
        return redirect(url_for('admin_login'))
    connection = get_db_connection()
    if not connection:
        flash('Database connection failed', 'danger')
        return redirect(url_for('admin_departments'))
    cursor = connection.cursor(dictionary=True)
    cursor.execute("SELECT * FROM departments WHERE id = %s", (id,))
    department = cursor.fetchone()
    if not department:
        cursor.close()
        connection.close()
        flash('Department not found', 'danger')
        return redirect(url_for('admin_departments'))
    if request.method == 'POST':
        name = request.form.get('name')
        status = request.form.get('status')
        try:
            cursor.execute("UPDATE departments SET name = %s, status = %s WHERE id = %s",
                           (name, status, id))
            connection.commit()
            flash('Department updated successfully', 'success')
        except Error as e:
            print(f"Error updating department: {e}")
            flash('Failed to update department due to database error', 'danger')
        finally:
            cursor.close()
            connection.close()
        return redirect(url_for('admin_departments'))
    cursor.close()
    connection.close()
    return render_template('department_form.html', department=department, action='Edit')

@app.route('/admin/department/delete/<int:id>')
def admin_department_delete(id):
    if 'user_id' not in session:
        flash('Please login first', 'danger')
        return redirect(url_for('admin_login'))
    connection = get_db_connection()
    if not connection:
        flash('Database connection failed', 'danger')
        return redirect(url_for('admin_departments'))
    cursor = connection.cursor()
    try:
        cursor.execute("DELETE FROM departments WHERE id = %s", (id,))
        connection.commit()
        flash('Department deleted successfully', 'success')
    except Error as e:
        print(f"Error deleting department: {e}")
        flash('Failed to delete department due to database error', 'danger')
    finally:
        cursor.close()
        connection.close()
    return redirect(url_for('admin_departments'))

@app.route('/admin/jobs')
def admin_jobs():
    if 'user_id' not in session:
        flash('Please login first', 'danger')
        print("Redirecting to login: user_id not in session")
        return redirect(url_for('admin_login'))
    connection = get_db_connection()
    if not connection:
        flash('Database connection failed', 'danger')
        print("Database connection failed")
        return redirect(url_for('admin_jobs'))
    cursor = connection.cursor(dictionary=True)
    try:
        cursor.execute("SELECT * FROM jobs ORDER BY posted_date DESC")
        jobs = cursor.fetchall()
        print(f"Fetched jobs for admin: {jobs}")
    except Error as e:
        print(f"Error fetching jobs: {e}")
        flash('Failed to fetch jobs', 'danger')
        jobs = []
    finally:
        cursor.close()
        connection.close()
    return render_template('jobs_list.html', jobs=jobs)

@app.route('/admin/job/new', methods=['GET', 'POST'])
def admin_job_new():
    if 'user_id' not in session:
        flash('Please login first', 'danger')
        return redirect(url_for('admin_login'))
    connection = get_db_connection()
    if not connection:
        flash('Database connection failed', 'danger')
        return redirect(url_for('admin_job_new'))
    cursor = connection.cursor(dictionary=True)
    cursor.execute("SELECT id, name FROM departments WHERE status = 'Active' ORDER BY name")
    departments = cursor.fetchall()
    if request.method == 'POST':
        title = request.form.get('title')
        description = request.form.get('description')
        department_id = request.form.get('department_id') or None
        location = request.form.get('location')
        type = request.form.get('type')
        status = 'Active' if request.form.get('status') == 'on' else 'Inactive'
        try:
            cursor.execute("INSERT INTO jobs (title, description, department_id, location, type, status, posted_date) VALUES (%s, %s, %s, %s, %s, %s, %s)",
                           (title, description, department_id, location, type, status, datetime.now()))
            connection.commit()
            flash('Job opening created successfully', 'success')
        except Error as e:
            print(f"Error inserting job: {e}")
            flash('Failed to create job due to database error', 'danger')
        finally:
            cursor.close()
            connection.close()
        return redirect(url_for('admin_jobs'))
    cursor.close()
    connection.close()
    return render_template('job_form.html', action='Create', job={'title': '', 'description': '', 'department_id': '', 'location': '', 'type': '', 'status': 'Active'}, departments=departments)

@app.route('/admin/job/edit/<int:id>', methods=['GET', 'POST'])
def admin_job_edit(id):
    if 'user_id' not in session:
        flash('Please login first', 'danger')
        return redirect(url_for('admin_login'))
    connection = get_db_connection()
    if not connection:
        flash('Database connection failed', 'danger')
        return redirect(url_for('admin_jobs'))
    cursor = connection.cursor(dictionary=True)
    cursor.execute("SELECT * FROM jobs WHERE id = %s", (id,))
    job = cursor.fetchone()
    cursor.execute("SELECT id, name FROM departments WHERE status = 'Active' ORDER BY name")
    departments = cursor.fetchall()
    if not job:
        cursor.close()
        connection.close()
        flash('Job opening not found', 'danger')
        return redirect(url_for('admin_jobs'))
    if request.method == 'POST':
        title = request.form.get('title')
        description = request.form.get('description')
        department_id = request.form.get('department_id') or None
        location = request.form.get('location')
        type = request.form.get('type')
        status = 'Active' if request.form.get('status') == 'on' else 'Inactive'
        try:
            cursor.execute("UPDATE jobs SET title = %s, description = %s, department_id = %s, location = %s, type = %s, status = %s WHERE id = %s",
                           (title, description, department_id, location, type, status, id))
            connection.commit()
            flash('Job opening updated successfully', 'success')
        except Error as e:
            print(f"Error updating job: {e}")
            flash('Failed to update job due to database error', 'danger')
        finally:
            cursor.close()
            connection.close()
        return redirect(url_for('admin_jobs'))
    cursor.close()
    connection.close()
    return render_template('job_form.html', job=job, action='Edit', departments=departments)

@app.route('/admin/job/delete/<int:id>')
def admin_job_delete(id):
    if 'user_id' not in session:
        flash('Please login first', 'danger')
        return redirect(url_for('admin_login'))
    connection = get_db_connection()
    if not connection:
        flash('Database connection failed', 'danger')
        return redirect(url_for('admin_jobs'))
    cursor = connection.cursor()
    try:
        cursor.execute("DELETE FROM jobs WHERE id = %s", (id,))
        connection.commit()
        flash('Job opening deleted successfully', 'success')
    except Error as e:
        print(f"Error deleting job: {e}")
        flash('Failed to delete job due to database error', 'danger')
    finally:
        cursor.close()
        connection.close()
    return redirect(url_for('admin_jobs'))

@app.route('/admin/toggle_job', methods=['POST'])
def toggle_job():
    if 'user_id' not in session:
        return jsonify({'success': False, 'message': 'Unauthorized'}), 401
    data = request.get_json()
    id = data.get('id')
    status = data.get('status')
    connection = get_db_connection()
    if not connection:
        return jsonify({'success': False, 'message': 'Database connection failed'}), 500
    cursor = connection.cursor()
    try:
        cursor.execute("UPDATE jobs SET status = %s WHERE id = %s", (status, id))
        connection.commit()
        return jsonify({'success': True})
    except Error as e:
        print(f"Error toggling job: {e}")
        connection.rollback()
        return jsonify({'success': False, 'message': 'Failed to toggle job'}), 500
    finally:
        cursor.close()
        connection.close()

@app.route('/api/submit-application', methods=['POST'])
def submit_application():
    job_id = request.form.get('job_id')
    name = request.form.get('name')
    email = request.form.get('email')
    phone = request.form.get('phone')
    permanent_address = request.form.get('permanent_address')
    current_location = request.form.get('current_location')
    highest_education = request.form.get('highest_education')
    skills = request.form.get('skills')
    cover_letter = request.form.get('cover_letter')
    resume = request.files.get('resume')
    if not job_id or not name or not email:
        return jsonify({'success': False, 'message': 'Required fields missing'}), 400
    if resume and not allowed_file(resume.filename):
        return jsonify({'success': False, 'message': 'Invalid file type. Only PDF or DOC/DOCX allowed'}), 400
    resume_path = None
    if resume:
        filename = secure_filename(resume.filename)
        resume_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        resume.save(resume_path)
        resume_path = f'http://10.10.50.93:5000/static/uploads/{filename}'
    connection = get_db_connection()
    if not connection:
        return jsonify({'success': False, 'message': 'Database connection failed'}), 500
    cursor = connection.cursor()
    try:
        cursor.execute("""
            INSERT INTO job_applications (
                job_id, name, email, phone, permanent_address, current_location,
                highest_education, skills, cover_letter, resume, applied_date, status
            ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
        """, (job_id, name, email, phone, permanent_address, current_location,
              highest_education, skills, cover_letter, resume_path, datetime.now(), 'Pending'))
        connection.commit()
        return jsonify({'success': True, 'message': 'Application submitted successfully'}), 200
    except Error as e:
        print(f"Error submitting application: {e}")
        connection.rollback()
        return jsonify({'success': False, 'message': 'Failed to submit application'}), 500
    finally:
        cursor.close()
        connection.close()

@app.route('/admin/applications')
def admin_applications():
    if 'user_id' not in session:
        flash('Please login first', 'danger')
        print("Redirecting to login: user_id not in session")
        return redirect(url_for('admin_login'))
    connection = get_db_connection()
    if not connection:
        flash('Database connection failed', 'danger')
        print("Database connection failed")
        return redirect(url_for('admin_applications'))
    cursor = connection.cursor(dictionary=True)
    try:
        cursor.execute("""
            SELECT ja.*, j.title AS job_title, d.name AS department
            FROM job_applications ja
            JOIN jobs j ON ja.job_id = j.id
            LEFT JOIN departments d ON j.department_id = d.id
            ORDER BY ja.applied_date DESC
        """)
        applications = cursor.fetchall()
        print(f"Fetched applications: {applications}")
    except Error as e:
        print(f"Error fetching applications: {e}")
        flash('Failed to fetch applications', 'danger')
        applications = []
    finally:
        cursor.close()
        connection.close()
    return render_template('applications_list.html', applications=applications)

@app.route('/admin/application/new', methods=['GET', 'POST'])
def admin_application_new():
    if 'user_id' not in session:
        flash('Please login first', 'danger')
        return redirect(url_for('admin_login'))
    connection = get_db_connection()
    if not connection:
        flash('Database connection failed', 'danger')
        return redirect(url_for('admin_application_new'))
    cursor = connection.cursor(dictionary=True)
    cursor.execute("SELECT id, title FROM jobs WHERE status = 'Active' ORDER BY title")
    jobs = cursor.fetchall()
    cursor.execute("SELECT id, name FROM departments WHERE status = 'Active' ORDER BY name")
    departments = cursor.fetchall()
    if request.method == 'POST':
        job_id = request.form.get('job_id')
        name = request.form.get('name')
        email = request.form.get('email')
        phone = request.form.get('phone')
        permanent_address = request.form.get('permanent_address')
        current_location = request.form.get('current_location')
        highest_education = request.form.get('highest_education')
        skills = request.form.get('skills')
        cover_letter = request.form.get('cover_letter')
        status = request.form.get('status', 'Pending')
        resume = request.files.get('resume')
        resume_path = None
        if resume and allowed_file(resume.filename):
            filename = secure_filename(resume.filename)
            resume_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            resume.save(resume_path)
            resume_path = f'http://10.10.50.93:5000/static/uploads/{filename}'
        try:
            cursor.execute("""
                INSERT INTO job_applications (
                    job_id, name, email, phone, permanent_address, current_location,
                    highest_education, skills, cover_letter, resume, applied_date, status
                ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
            """, (job_id, name, email, phone, permanent_address, current_location,
                  highest_education, skills, cover_letter, resume_path, datetime.now(), status))
            connection.commit()
            flash('Application created successfully', 'success')
        except Error as e:
            print(f"Error inserting application: {e}")
            flash('Failed to create application due to database error', 'danger')
        finally:
            cursor.close()
            connection.close()
        return redirect(url_for('admin_applications'))
    cursor.close()
    connection.close()
    return render_template('application_form.html', action='Create',
                         application={'job_id': '', 'name': '', 'email': '', 'phone': '',
                                      'permanent_address': '', 'current_location': '',
                                      'highest_education': '', 'skills': '', 'cover_letter': '', 'status': 'Pending'},
                         jobs=jobs, departments=departments)

@app.route('/admin/application/delete/<int:id>')
def admin_application_delete(id):
    if 'user_id' not in session:
        flash('Please login first', 'danger')
        return redirect(url_for('admin_login'))
    connection = get_db_connection()
    if not connection:
        flash('Database connection failed', 'danger')
        return redirect(url_for('admin_applications'))
    cursor = connection.cursor()
    try:
        cursor.execute("DELETE FROM job_applications WHERE id = %s", (id,))
        connection.commit()
        flash('Application deleted successfully', 'success')
    except Error as e:
        print(f"Error deleting application: {e}")
        flash('Failed to delete application due to database error', 'danger')
    finally:
        cursor.close()
        connection.close()
    return redirect(url_for('admin_applications'))

@app.route('/admin/application/update_status/<int:id>', methods=['POST'])
def admin_application_update_status(id):
    if 'user_id' not in session:
        flash('Please login first', 'danger')
        return redirect(url_for('admin_login'))
    status = request.form.get('status')
    if status not in ['Pending', 'Reviewed', 'Hired', 'Rejected']:
        flash('Invalid status', 'danger')
        return redirect(url_for('admin_applications'))
    connection = get_db_connection()
    if not connection:
        flash('Database connection failed', 'danger')
        return redirect(url_for('admin_applications'))
    cursor = connection.cursor()
    try:
        cursor.execute("UPDATE job_applications SET status = %s WHERE id = %s", (status, id))
        connection.commit()
        flash('Application status updated successfully', 'success')
    except Error as e:
        print(f"Error updating application status: {e}")
        flash('Failed to update application status', 'danger')
    finally:
        cursor.close()
        connection.close()
    return redirect(url_for('admin_applications'))

@app.route('/admin/employee_testimonials')
def admin_employee_testimonials():
    if 'user_id' not in session:
        flash('Please login first', 'danger')
        return redirect(url_for('admin_login'))
    connection = get_db_connection()
    if not connection:
        flash('Database connection failed', 'danger')
        return redirect(url_for('admin_dashboard'))
    cursor = connection.cursor(dictionary=True)
    try:
        cursor.execute("SELECT * FROM employee_testimonials ORDER BY created_at DESC")
        testimonials = cursor.fetchall()
    except Error as e:
        print(f"Error fetching employee testimonials: {e}")
        flash('Failed to fetch employee testimonials', 'danger')
        testimonials = []
    finally:
        cursor.close()
        connection.close()
    return render_template('employee_testimonials_list.html', testimonials=testimonials)

@app.route('/admin/employee/testimonial/new', methods=['GET', 'POST'])
def admin_employee_testimonial_new():
    if 'user_id' not in session:
        flash('Please login first', 'danger')
        return redirect(url_for('admin_login'))
    if request.method == 'POST':
        employee_name = request.form.get('employee_name')
        job_role = request.form.get('job_role')
        feedback = request.form.get('feedback')
        rating = request.form.get('rating')
        status = 'status' in request.form  # Checkbox for Active/Inactive
        connection = get_db_connection()
        if not connection:
            flash('Database connection failed', 'danger')
            return redirect(url_for('admin_employee_testimonials'))
        cursor = connection.cursor()
        try:
            cursor.execute(
                "INSERT INTO employee_testimonials (employee_name, job_role, feedback, rating, status, created_at) VALUES (%s, %s, %s, %s, %s, %s)",
                (employee_name, job_role, feedback, rating, status, datetime.now())
            )
            connection.commit()
            flash('Employee testimonial created successfully', 'success')
        except Error as e:
                        flash('Failed to create employee testimonial due to database error', 'danger')
        finally:
            cursor.close()
            connection.close()
        return redirect(url_for('admin_employee_testimonials'))
    return render_template('employee_testimonial_form.html', action='Create', testimonial={'employee_name': '', 'job_role': '', 'feedback': '', 'rating': 0, 'status': False})

@app.route('/admin/employee/testimonial/edit/<int:id>', methods=['GET', 'POST'])
def admin_employee_testimonial_edit(id):
    if 'user_id' not in session:
        flash('Please login first', 'danger')
        return redirect(url_for('admin_login'))
    connection = get_db_connection()
    if not connection:
        flash('Database connection failed', 'danger')
        return redirect(url_for('admin_employee_testimonials'))
    cursor = connection.cursor(dictionary=True)
    cursor.execute("SELECT * FROM employee_testimonials WHERE id = %s", (id,))
    testimonial = cursor.fetchone()
    if not testimonial:
        cursor.close()
        connection.close()
        flash('Employee testimonial not found', 'danger')
        return redirect(url_for('admin_employee_testimonials'))
    if request.method == 'POST':
        employee_name = request.form.get('employee_name')
        job_role = request.form.get('job_role')
        feedback = request.form.get('feedback')
        rating = request.form.get('rating')
        status = 'status' in request.form
        try:
            cursor.execute(
                "UPDATE employee_testimonials SET employee_name = %s, job_role = %s, feedback = %s, rating = %s, status = %s WHERE id = %s",
                (employee_name, job_role, feedback, rating, status, id)
            )
            connection.commit()
            flash('Employee testimonial updated successfully', 'success')
        except Error as e:
            print(f"Error updating employee testimonial: {e}")
            flash('Failed to update employee testimonial due to database error', 'danger')
        finally:
            cursor.close()
            connection.close()
        return redirect(url_for('admin_employee_testimonials'))
    cursor.close()
    connection.close()
    return render_template('employee_testimonial_form.html', testimonial=testimonial, action='Edit')

@app.route('/admin/employee/testimonial/delete/<int:id>', methods=['POST'])
def admin_employee_testimonial_delete(id):
    if 'user_id' not in session:
        flash('Please login first', 'danger')
        return redirect(url_for('admin_login'))
    connection = get_db_connection()
    if not connection:
        flash('Database connection failed', 'danger')
        return redirect(url_for('admin_employee_testimonials'))
    cursor = connection.cursor()
    try:
        cursor.execute("DELETE FROM employee_testimonials WHERE id = %s", (id,))
        connection.commit()
        flash('Employee testimonial deleted successfully', 'success')
    except Error as e:
        print(f"Error deleting employee testimonial: {e}")
        flash('Failed to delete employee testimonial due to database error', 'danger')
    finally:
        cursor.close()
        connection.close()
    return redirect(url_for('admin_employee_testimonials'))

if __name__ == '__main__':
    initialize_db()
    app.run(host='0.0.0.0', port=5000, debug=True)


====== requirements.txt ======
Flask==3.1.2
flask_cors==6.0.1
mysql_connector_repackaged==0.3.1
PyJWT==2.10.1
PyJWT==2.10.1
python-dotenv==1.1.1
Requests==2.32.5
Werkzeug==3.1.3



====== templates/about_form.html ======
{% extends 'base.html' %}
{% block content %}
<div class="page-header">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1><i class="fas fa-info-circle me-3"></i>About Us Page</h1>
            <nav class="breadcrumb">
                <a href="{{ url_for('admin_dashboard') }}" class="breadcrumb-item">Dashboard</a>
                <span class="breadcrumb-item active">About Us</span>
            </nav>
        </div>
    </div>
</div>

<div class="row">
    <!-- Left Column - Main Form -->
    <div class="col-lg-8">
        <form method="POST">
            <div class="form-section">
                <h5><i class="fas fa-edit me-2"></i>About Us Content</h5>
                
                <div class="mb-3">
                    <label for="content" class="form-label">Page Content *</label>
                    <textarea class="form-control" id="content" name="content" rows="15" required>{{ about.content if about else '' }}</textarea>
                    <div class="form-text">Use the rich text editor to format your company's about us page</div>
                </div>
            </div>

            <div class="form-section">
                <div class="d-flex justify-content-between align-items-center">
                    <div class="action-buttons">
                        <button type="submit" class="btn btn-primary btn-lg">
                            <i class="fas fa-save me-2"></i>Update About Us
                        </button>
                        <button type="button" class="btn btn-outline-info" onclick="previewContent()">
                            <i class="fas fa-eye me-2"></i>Preview
                        </button>
                    </div>
                </div>
            </div>
        </form>
    </div>

    <!-- Right Column - Tips -->
    <div class="col-lg-4">
        <div class="card">
            <div class="card-header">
                <h6 class="mb-0"><i class="fas fa-lightbulb me-2"></i>Content Guidelines</h6>
            </div>
            <div class="card-body">
                <ul class="list-unstyled mb-0 small">
                    <li class="mb-2"><i class="fas fa-check text-success me-2"></i>Tell your company's story</li>
                    <li class="mb-2"><i class="fas fa-check text-success me-2"></i>Highlight your mission and values</li>
                    <li class="mb-2"><i class="fas fa-check text-success me-2"></i>Include team information</li>
                    <li class="mb-2"><i class="fas fa-check text-success me-2"></i>Mention your expertise areas</li>
                    <li><i class="fas fa-check text-success me-2"></i>Keep it engaging and professional</li>
                </ul>
            </div>
        </div>

        <div class="card mt-3">
            <div class="card-header">
                <h6 class="mb-0"><i class="fas fa-chart-line me-2"></i>SEO Tips</h6>
            </div>
            <div class="card-body">
                <ul class="list-unstyled mb-0 small">
                    <li class="mb-2"><i class="fas fa-check text-success me-2"></i>Include relevant keywords naturally</li>
                    <li class="mb-2"><i class="fas fa-check text-success me-2"></i>Use headings to structure content</li>
                    <li class="mb-2"><i class="fas fa-check text-success me-2"></i>Add internal links where appropriate</li>
                    <li><i class="fas fa-check text-success me-2"></i>Optimize for local search</li>
                </ul>
            </div>
        </div>
    </div>
</div>

<!-- Preview Modal -->
<div class="modal fade" id="previewModal" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title"><i class="fas fa-eye me-2"></i>Content Preview</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="previewContent">
                <!-- Preview content will be loaded here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(function() {
        // Initialize Summernote rich text editor
        $('#content').summernote({
            height: 500,
            toolbar: [
                ['style', ['style']],
                ['font', ['bold', 'underline', 'italic', 'clear']],
                ['fontsize', ['fontsize']],
                ['color', ['color']],
                ['para', ['ul', 'ol', 'paragraph']],
                ['height', ['height']],
                ['table', ['table']],
                ['insert', ['link', 'picture']],
                ['view', ['fullscreen', 'codeview', 'help']]
            ]
        });
    });

    function previewContent() {
        const content = $('#content').summernote('code');
        document.getElementById('previewContent').innerHTML = content;
        
        const modal = new bootstrap.Modal(document.getElementById('previewModal'));
        modal.show();
    }
</script>
{% endblock %}


====== templates/admin_blogs.html ======
{% extends 'base.html' %}
{% block content %}
<div class="card">
    <div class="card-header">
        <h3>Manage Blogs</h3>
        <a href="{{ url_for('admin_blog_new') }}" class="btn btn-primary">Add New Blog</a>
    </div>
    <div class="card-body">
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    <div class="alert alert-{{ category }}">{{ message }}</div>
                {% endfor %}
            {% endif %}
        {% endwith %}
        <table class="table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Title</th>
                    <th>Category</th>
                    <th>Date</th>
                    <th>Priority</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                {% for blog in blogs %}
                <tr>
                    <td>{{ blog.id }}</td>
                    <td>{{ blog.title }}</td>
                    <td>{{ blog.category }}</td>
                    <td>{{ blog.date.strftime('%Y-%m-%d %H:%M:%S') }}</td>
                    <td>{{ blog.priority }}</td>
                    <td>
                        <a href="{{ url_for('admin_blog_edit', id=blog.id) }}" class="btn btn-sm btn-warning">Edit</a>
                        <form action="{{ url_for('admin_blog_delete', id=blog.id) }}" method="POST" style="display:inline;">
                            <button type="submit" class="btn btn-sm btn-danger" onclick="return confirm('Are you sure you want to delete this blog?');">Delete</button>
                        </form>
                        <div class="form-check form-switch">
                            <input type="checkbox" class="form-check-input toggle-enabled" data-id="{{ blog.id }}" {% if blog.is_enabled %}checked{% endif %}>
                            <label class="form-check-label">Enable</label>
                        </div>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
</div>
<script>
    document.querySelectorAll('.toggle-enabled').forEach(toggle => {
        toggle.addEventListener('change', function() {
            const id = this.getAttribute('data-id');
            const isEnabled = this.checked;
            fetch('/admin/toggle_blog', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ id: id, is_enabled: isEnabled })
            }).then(response => response.json())
              .then(data => {
                  if (data.success) {
                      alert('Blog status updated successfully');
                  } else {
                      alert('Failed to update blog status');
                      this.checked = !isEnabled; // Revert if failed
                  }
              })
              .catch(error => {
                  console.error('Error:', error);
                  this.checked = !isEnabled; // Revert if error
              });
        });
    });
</script>
{% endblock %}


====== templates/admin_testimonials.html ======
{% extends 'base.html' %}
{% block content %}
<div class="card">
    <div class="card-header">
        <h3>Manage Testimonials</h3>
        <a href="{{ url_for('admin_testimonial_new') }}" class="btn btn-primary">Add New Testimonial</a>
    </div>
    <div class="card-body">
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    <div class="alert alert-{{ category }}">{{ message }}</div>
                {% endfor %}
            {% endif %}
        {% endwith %}
        <table class="table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Company</th>
                    <th>Rating</th>
                    <th>Date</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                {% for testimonial in testimonials %}
                <tr>
                    <td>{{ testimonial.id }}</td>
                    <td>{{ testimonial.name }}</td>
                    <td>{{ testimonial.company }}</td>
                    <td>{{ testimonial.rating }}</td>
                    <td>{{ testimonial.date.strftime('%Y-%m-%d %H:%M:%S') }}</td>
                    <td>
                        <a href="{{ url_for('admin_testimonial_edit', id=testimonial.id) }}" class="btn btn-sm btn-warning">Edit</a>
                        <form action="{{ url_for('admin_testimonial_delete', id=testimonial.id) }}" method="POST" style="display:inline;">
                            <button type="submit" class="btn btn-sm btn-danger" onclick="return confirm('Are you sure you want to delete this testimonial?');">Delete</button>
                        </form>
                        <div class="form-check form-switch">
                            <input type="checkbox" class="form-check-input toggle-enabled" data-id="{{ testimonial.id }}" {% if testimonial.is_enabled %}checked{% endif %}>
                            <label class="form-check-label">Enable</label>
                        </div>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
</div>
<script>
    document.querySelectorAll('.toggle-enabled').forEach(toggle => {
        toggle.addEventListener('change', function() {
            const id = this.getAttribute('data-id');
            const isEnabled = this.checked;
            fetch('/admin/toggle_testimonial', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ id: id, is_enabled: isEnabled })
            }).then(response => response.json())
              .then(data => {
                  if (data.success) {
                      alert('Testimonial status updated successfully');
                  } else {
                      alert('Failed to update testimonial status');
                      this.checked = !isEnabled;
                  }
              })
              .catch(error => {
                  console.error('Error:', error);
                  this.checked = !isEnabled;
              });
        });
    });
</script>
{% endblock %}


====== templates/application_form.html ======
{% extends 'base.html' %}
{% block content %}
<div class="container mt-5">
    <h2>{{ action }} Job Application</h2>
    <form method="POST" enctype="multipart/form-data">
        <div class="mb-3">
            <label for="job_id" class="form-label">Job</label>
            <select class="form-control" id="job_id" name="job_id" required>
                <option value="" disabled {% if not application.job_id %}selected{% endif %}>Select a job</option>
                {% for job in jobs %}
                <option value="{{ job.id }}" {% if application.job_id == job.id %}selected{% endif %}>{{ job.title }}</option>
                {% endfor %}
            </select>
        </div>
        <div class="mb-3">
            <label for="name" class="form-label">Name</label>
            <input type="text" class="form-control" id="name" name="name" value="{{ application.name | default('') }}" required>
        </div>
        <div class="mb-3">
            <label for="email" class="form-label">Email</label>
            <input type="email" class="form-control" id="email" name="email" value="{{ application.email | default('') }}" required>
        </div>
        <div class="mb-3">
            <label for="phone" class="form-label">Phone</label>
            <input type="text" class="form-control" id="phone" name="phone" value="{{ application.phone | default('') }}">
        </div>
        <div class="mb-3">
            <label for="permanent_address" class="form-label">Permanent Address</label>
            <textarea class="form-control" id="permanent_address" name="permanent_address">{{ application.permanent_address | default('') }}</textarea>
        </div>
        <div class="mb-3">
            <label for="current_location" class="form-label">Current Location</label>
            <input type="text" class="form-control" id="current_location" name="current_location" value="{{ application.current_location | default('') }}">
        </div>
        <div class="mb-3">
            <label for="highest_education" class="form-label">Highest Education</label>
            <input type="text" class="form-control" id="highest_education" name="highest_education" value="{{ application.highest_education | default('') }}">
        </div>
        <div class="mb-3">
            <label for="skills" class="form-label">Skills (comma-separated)</label>
            <input type="text" class="form-control" id="skills" name="skills" value="{{ application.skills | default('') }}">
        </div>
        <div class="mb-3">
            <label for="cover_letter" class="form-label">Cover Letter</label>
            <textarea class="form-control" id="cover_letter" name="cover_letter">{{ application.cover_letter | default('') }}</textarea>
        </div>
        <div class="mb-3">
            <label for="resume" class="form-label">Resume (PDF)</label>
            <input type="file" class="form-control" id="resume" name="resume" accept=".pdf">
        </div>
        <button type="submit" class="btn btn-primary">{{ action }} Application</button>
        <a href="{{ url_for('admin_applications') }}" class="btn btn-secondary">Cancel</a>
    </form>
</div>
<script>
    $(document).ready(function() {
        $('#cover_letter').summernote({
            height: 200,
            toolbar: [
                ['style', ['style']],
                ['font', ['bold', 'underline', 'clear']],
                ['color', ['color']],
                ['para', ['ul', 'ol', 'paragraph']],
                ['table', ['table']],
                ['insert', ['link']],
                ['view', ['fullscreen', 'codeview', 'help']]
            ]
        });
        $('#permanent_address').summernote({
            height: 100,
            toolbar: [
                ['font', ['bold', 'underline', 'clear']],
                ['para', ['ul', 'ol', 'paragraph']],
                ['view', ['fullscreen', 'codeview']]
            ]
        });
    });
</script>
{% endblock %}


====== templates/applications_list.html ======
{% extends 'base.html' %}
{% block content %}
<div class="page-header">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1><i class="fas fa-file-alt me-3"></i>Job Applications</h1>
            <nav class="breadcrumb">
                <a href="{{ url_for('admin_dashboard') }}" class="breadcrumb-item">Dashboard</a>
                <span class="breadcrumb-item active">Applications</span>
            </nav>
        </div>
        <div class="d-flex gap-2">
            <button class="btn btn-success export-btn" onclick="exportData()">
                <i class="fas fa-download me-2"></i>Export Excel
            </button>
        </div>
    </div>
</div>

<!-- Filter Bar -->
<div class="card mb-3">
    <div class="card-body">
        <div class="row">
            <div class="col-md-3">
                <label for="statusFilter" class="form-label">Filter by Status:</label>
                <select class="form-select" id="statusFilter">
                    <option value="">All Status</option>
                    <option value="Pending">Pending</option>
                    <option value="Reviewed">Reviewed</option>
                    <option value="Hired">Hired</option>
                    <option value="Rejected">Rejected</option>
                </select>
            </div>
            <div class="col-md-3">
                <label for="jobFilter" class="form-label">Filter by Job:</label>
                <select class="form-select" id="jobFilter">
                    <option value="">All Jobs</option>
                    {% for application in applications %}
                        <option value="{{ application.job_title }}">{{ application.job_title }}</option>
                    {% endfor %}
                </select>
            </div>
            <div class="col-md-6 d-flex align-items-end">
                <button class="btn btn-outline-secondary" onclick="clearFilters()">
                    <i class="fas fa-refresh me-2"></i>Clear Filters
                </button>
            </div>
        </div>
    </div>
</div>

<div class="card">
    <div class="card-body">
        <div class="table-responsive">
            <table class="table data-table" id="applicationsTable">
                <thead>
                    <tr>
                        <th>Applicant Name</th>
                        <th>Job Title</th>
                        <th>Email</th>
                        <th>Phone</th>
                        <th>Education</th>
                        <th>Status</th>
                        <th>Applied Date</th>
                        <th>Resume</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {% for application in applications %}
                    <tr>
                        <td>
                            <div class="fw-medium">{{ application.name }}</div>
                            <small class="text-muted">{{ application.current_location or 'Location not specified' }}</small>
                        </td>
                        <td>
                            <div class="fw-medium">{{ application.job_title }}</div>
                            {% if application.department %}
                                <small class="badge bg-info">{{ application.department }}</small>
                            {% endif %}
                        </td>
                        <td>{{ application.email }}</td>
                        <td>{{ application.phone | default('N/A') }}</td>
                        <td>{{ application.highest_education | default('N/A') }}</td>
                        <td>
                            <form method="POST" action="{{ url_for('admin_application_update_status', id=application.id) }}" class="d-inline">
                                <select name="status" class="form-select form-select-sm status-select" 
                                        onchange="this.form.submit()" data-current="{{ application.status }}">
                                    <option value="Pending" {% if application.status == 'Pending' %}selected{% endif %}>Pending</option>
                                    <option value="Reviewed" {% if application.status == 'Reviewed' %}selected{% endif %}>Reviewed</option>
                                    <option value="Hired" {% if application.status == 'Hired' %}selected{% endif %}>Hired</option>
                                    <option value="Rejected" {% if application.status == 'Rejected' %}selected{% endif %}>Rejected</option>
                                </select>
                            </form>
                        </td>
                        <td>{{ application.applied_date.strftime('%Y-%m-%d') if application.applied_date else 'N/A' }}</td>
                        <td>
                            {% if application.resume %}
                                <a href="{{ application.resume }}" target="_blank" class="btn btn-sm btn-outline-info">
                                    <i class="fas fa-file-pdf me-1"></i>View
                                </a>
                            {% else %}
                                <span class="text-muted">No Resume</span>
                            {% endif %}
                        </td>
                        <td>
                            <div class="table-actions">
                                <button class="btn btn-sm btn-outline-info" onclick="viewApplication({{ application.id }})" title="View Details">
                                    <i class="fas fa-eye"></i>
                                </button>
                                <a href="{{ url_for('admin_application_delete', id=application.id) }}" 
                                   class="btn btn-sm btn-outline-danger" title="Delete"
                                   onclick="return confirm('Are you sure you want to delete this application?');">
                                    <i class="fas fa-trash"></i>
                                </a>
                            </div>
                        </td>
                    </tr>
                    {% else %}
                    <tr>
                        <td colspan="9" class="text-center text-muted py-4">No applications found.</td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Application Details Modal -->
<div class="modal fade" id="applicationModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title"><i class="fas fa-user me-2"></i>Application Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="applicationDetails">
                <!-- Application details will be loaded here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(function() {
        const table = $('#applicationsTable').DataTable({
            responsive: true,
            pageLength: 25,
            order: [[6, 'desc']], // Sort by applied date
            columnDefs: [
                { orderable: false, targets: [5, 8] } // Disable sorting for status and actions
            ]
        });

        // Filter functionality
        $('#statusFilter').on('change', function() {
            table.column(5).search(this.value).draw();
        });

        $('#jobFilter').on('change', function() {
            table.column(1).search(this.value).draw();
        });
    });

    function clearFilters() {
        $('#statusFilter').val('');
        $('#jobFilter').val('');
        $('#applicationsTable').DataTable().search('').columns().search('').draw();
    }

    function viewApplication(id) {
        // This would typically load application details via AJAX
        // For now, we'll show a placeholder
        document.getElementById('applicationDetails').innerHTML = `
            <div class="text-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2">Loading application details...</p>
            </div>
        `;
        
        const modal = new bootstrap.Modal(document.getElementById('applicationModal'));
        modal.show();
        
        // Simulate loading
        setTimeout(() => {
            document.getElementById('applicationDetails').innerHTML = `
                <p>Application details for ID: ${id} would be displayed here.</p>
                <p><small class="text-muted">This feature requires additional API endpoint implementation.</small></p>
            `;
        }, 1500);
    }

    function exportData() {
        const table = $('#applicationsTable').DataTable();
        const data = table.rows({search: 'applied'}).data().toArray();
        
        let csv = 'Name,Job Title,Email,Phone,Education,Status,Applied Date\n';
        data.forEach(row => {
            const cells = $(row).find('td');
            const name = $(cells[0]).find('.fw-medium').text().trim();
            const jobTitle = $(cells[1]).find('.fw-medium').text().trim();
            const email = $(cells[2]).text().trim();
            const phone = $(cells[3]).text().trim();
            const education = $(cells[4]).text().trim();
            const status = $(cells[5]).find('select').val();
            const date = $(cells[6]).text().trim();
            
            csv += `"${name}","${jobTitle}","${email}","${phone}","${education}","${status}","${date}"\n`;
        });
        
        const blob = new Blob([csv], { type: 'text/csv' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'applications_export.csv';
        a.click();
        window.URL.revokeObjectURL(url);
    }
</script>
{% endblock %}


====== templates/base.html ======
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tej IT Admin Panel</title>
    <!-- Bootstrap 5 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Google Fonts - Inter -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <!-- Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" rel="stylesheet">
    <!-- Summernote CSS -->
    <link href="https://cdn.jsdelivr.net/npm/summernote@0.9.1/dist/summernote-bs5.min.css" rel="stylesheet">
    <!-- DataTables CSS -->
    <link href="https://cdn.datatables.net/1.13.7/css/dataTables.bootstrap5.min.css" rel="stylesheet">
    <!-- Custom CSS -->
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
    <link rel="icon" href="{{ url_for('static', filename='favicon.ico') }}">
    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <!-- DataTables JS -->
    <script src="https://cdn.datatables.net/1.13.7/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.7/js/dataTables.bootstrap5.min.js"></script>
    <!-- Summernote JS -->
    <script src="https://cdn.jsdelivr.net/npm/summernote@0.9.1/dist/summernote-bs5.min.js"></script>
</head>
<body>
    <!-- Top Navigation -->
    <nav class="navbar navbar-expand-lg navbar-light bg-white border-bottom sticky-top">
        <div class="container-fluid px-4">
            <!-- Sidebar Toggle -->
            <button class="btn btn-light me-3" id="sidebarToggle">
                <i class="fas fa-bars"></i>
            </button>
            
            <!-- Logo/Brand -->
            <div class="navbar-brand mb-0 h1">
                <i class="fas fa-cog text-primary me-2"></i>
                <span class="fw-bold">Admin Panel</span>
            </div>

            <!-- Right side nav -->
            <div class="navbar-nav ms-auto d-flex flex-row">
                <!-- Quick Actions Dropdown -->
                <div class="nav-item dropdown me-3">
                    <button class="btn btn-primary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown">
                        <i class="fas fa-plus me-1"></i> Quick Add
                    </button>
                    <ul class="dropdown-menu dropdown-menu-end">
                        <li><a class="dropdown-item" href="{{ url_for('admin_job_new') }}"><i class="fas fa-briefcase me-2"></i>Add Job</a></li>
                        <li><a class="dropdown-item" href="{{ url_for('admin_blog_new') }}"><i class="fas fa-blog me-2"></i>Add Blog</a></li>
                        <li><a class="dropdown-item" href="{{ url_for('admin_testimonial_new') }}"><i class="fas fa-star me-2"></i>Add Testimonial</a></li>
                        <li><a class="dropdown-item" href="{{ url_for('admin_team_new') }}"><i class="fas fa-user-plus me-2"></i>Add Team Member</a></li>
                        <li><a class="dropdown-item" href="{{ url_for('admin_department_new') }}"><i class="fas fa-building me-2"></i>Add Department</a></li>
                    </ul>
                </div>

                <!-- Notifications -->
                <div class="nav-item me-3">
                    <button class="btn btn-light position-relative">
                        <i class="fas fa-bell"></i>
                        <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger small">3</span>
                    </button>
                </div>

                <!-- Profile Dropdown -->
                <div class="nav-item dropdown">
                    <button class="btn btn-light dropdown-toggle d-flex align-items-center" type="button" data-bs-toggle="dropdown">
                        <i class="fas fa-user-circle me-1"></i>
                        <span class="d-none d-md-inline">Admin</span>
                    </button>
                    <ul class="dropdown-menu dropdown-menu-end">
                        <li><a class="dropdown-item" href="#"><i class="fas fa-user me-2"></i>Profile</a></li>
                        <li><a class="dropdown-item" href="#"><i class="fas fa-cog me-2"></i>Settings</a></li>
                        <li><hr class="dropdown-divider"></li>
                        <li><a class="dropdown-item" href="{{ url_for('admin_logout') }}"><i class="fas fa-sign-out-alt me-2"></i>Logout</a></li>
                    </ul>
                </div>
            </div>
        </div>
    </nav>

    <div class="d-flex">
        <!-- Sidebar -->
        <nav class="sidebar bg-light border-end" id="sidebar">
            <div class="sidebar-content p-3">
                <!-- Dashboard -->
                <div class="nav-section mb-4">
                    <a class="nav-link {% if request.endpoint == 'admin_dashboard' %}active{% endif %}" href="{{ url_for('admin_dashboard') }}">
                        <i class="fas fa-tachometer-alt"></i>
                        <span>Dashboard</span>
                    </a>
                </div>

                <!-- Careers Section -->
                <div class="nav-section mb-4">
                    <h6 class="nav-header">
                        <i class="fas fa-folder text-muted me-2"></i>Careers
                    </h6>
                    <a class="nav-link {% if request.endpoint in ['admin_departments', 'admin_department_new', 'admin_department_edit'] %}active{% endif %}" href="{{ url_for('admin_departments') }}">
                        <i class="fas fa-building"></i>
                        <span>Departments</span>
                    </a>
                    <a class="nav-link {% if request.endpoint in ['admin_jobs', 'admin_job_new', 'admin_job_edit'] %}active{% endif %}" href="{{ url_for('admin_jobs') }}">
                        <i class="fas fa-briefcase"></i>
                        <span>Jobs</span>
                    </a>
                    <a class="nav-link {% if request.endpoint in ['admin_applications', 'admin_application_new'] %}active{% endif %}" href="{{ url_for('admin_applications') }}">
                        <i class="fas fa-file-alt"></i>
                        <span>Job Applications</span>
                    </a>
                </div>

                <!-- Employees Section -->
                <div class="nav-section mb-4">
                    <h6 class="nav-header">
                        <i class="fas fa-users text-muted me-2"></i>Employees
                    </h6>
                    <a class="nav-link {% if request.endpoint in ['admin_employee_testimonials', 'admin_employee_testimonial_new', 'admin_employee_testimonial_edit'] %}active{% endif %}" href="{{ url_for('admin_employee_testimonials') }}">
                        <i class="fas fa-star"></i>
                        <span>Employee Testimonials</span>
                    </a>
                    <a class="nav-link {% if request.endpoint in ['admin_teams', 'admin_team_new', 'admin_team_edit'] %}active{% endif %}" href="{{ url_for('admin_teams') }}">
                        <i class="fas fa-users-cog"></i>
                        <span>Teams</span>
                    </a>
                </div>

                <!-- Leads Section -->
                <div class="nav-section mb-4">
                    <h6 class="nav-header">
                        <i class="fas fa-chart-line text-muted me-2"></i>Leads
                    </h6>
                    <a class="nav-link {% if request.endpoint == 'admin_enquiries' %}active{% endif %}" href="{{ url_for('admin_enquiries') }}">
                        <i class="fas fa-envelope"></i>
                        <span>Enquiries</span>
                    </a>
                </div>

                <!-- Content Section -->
                <div class="nav-section mb-4">
                    <h6 class="nav-header">
                        <i class="fas fa-edit text-muted me-2"></i>Content
                    </h6>
                    <a class="nav-link {% if request.endpoint in ['admin_blogs', 'admin_blog_new', 'admin_blog_edit'] %}active{% endif %}" href="{{ url_for('admin_blogs') }}">
                        <i class="fas fa-blog"></i>
                        <span>Blogs</span>
                    </a>
                    <a class="nav-link {% if request.endpoint in ['admin_testimonials', 'admin_testimonial_new', 'admin_testimonial_edit'] %}active{% endif %}" href="{{ url_for('admin_testimonials') }}">
                        <i class="fas fa-quote-right"></i>
                        <span>Client Testimonials</span>
                    </a>
                    <a class="nav-link {% if request.endpoint == 'admin_about_us' %}active{% endif %}" href="{{ url_for('admin_about_us') }}">
                        <i class="fas fa-info-circle"></i>
                        <span>About Page</span>
                    </a>
                </div>

                <!-- Settings Section -->
                <div class="nav-section">
                    <h6 class="nav-header">
                        <i class="fas fa-cog text-muted me-2"></i>Settings
                    </h6>
                    <a class="nav-link" href="#">
                        <i class="fas fa-sliders-h"></i>
                        <span>General Settings</span>
                    </a>
                    <a class="nav-link" href="#">
                        <i class="fas fa-users-cog"></i>
                        <span>User Management</span>
                    </a>
                </div>
            </div>
        </nav>

        <!-- Main Content -->
        <main class="main-content flex-grow-1">
            <!-- Flashed Messages -->
            {% with messages = get_flashed_messages(with_categories=true) %}
                {% if messages %}
                    {% for category, message in messages %}
                        <div class="alert alert-{{ 'danger' if category == 'danger' else 'success' if category == 'success' else 'warning' }} alert-dismissible fade show" role="alert">
                            <i class="fas fa-{{ 'exclamation-circle' if category == 'danger' else 'check-circle' if category == 'success' else 'exclamation-triangle' }} me-2"></i>
                            {{ message }}
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        </div>
                    {% endfor %}
                {% endif %}
            {% endwith %}

            {% block content %}{% endblock %}
        </main>
    </div>

    <!-- Bootstrap 5 JS Bundle -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    
    <!-- Custom JavaScript -->
    <script>
        // Sidebar toggle functionality
        document.getElementById('sidebarToggle').addEventListener('click', function() {
            const sidebar = document.getElementById('sidebar');
            const mainContent = document.querySelector('.main-content');
            
            sidebar.classList.toggle('collapsed');
            mainContent.classList.toggle('sidebar-collapsed');
        });

        // Auto-dismiss alerts after 5 seconds
        setTimeout(function() {
            $('.alert').fadeOut('slow');
        }, 5000);
    </script>
</body>
</html>


====== templates/blog_form.html ======
{% extends 'base.html' %}
{% block content %}
<div class="page-header">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1><i class="fas fa-blog me-3"></i>{{ action }} Blog</h1>
            <nav class="breadcrumb">
                <a href="{{ url_for('admin_dashboard') }}" class="breadcrumb-item">Dashboard</a>
                <a href="{{ url_for('admin_blogs') }}" class="breadcrumb-item">Blogs</a>
                <span class="breadcrumb-item active">{{ action }}</span>
            </nav>
        </div>
    </div>
</div>

<div class="row">
    <!-- Left Column - Main Form -->
    <div class="col-lg-8">
        <form method="POST" enctype="multipart/form-data">
            <div class="form-section">
                <h5><i class="fas fa-info-circle me-2"></i>Blog Information</h5>
                
                <div class="mb-3">
                    <label for="title" class="form-label">Blog Title *</label>
                    <input type="text" class="form-control" id="title" name="title" 
                           value="{{ blog.title if blog else '' }}" required
                           placeholder="Enter an engaging blog title">
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label for="category" class="form-label">Category *</label>
                        <select class="form-select" id="category" name="category" required>
                            {% for cat in categories %}
                                <option value="{{ cat }}" {% if blog and blog.category == cat %}selected{% endif %}>{{ cat }}</option>
                            {% endfor %}
                        </select>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="slug" class="form-label">URL Slug *</label>
                        <input type="text" class="form-control" id="slug" name="slug" 
                               value="{{ blog.slug if blog else '' }}" required
                               placeholder="auto-generated-from-title">
                        <div class="form-text">Used in the blog URL. Auto-generated from title.</div>
                    </div>
                </div>

                <div class="mb-3">
                    <label for="excerpt" class="form-label">Excerpt</label>
                    <textarea class="form-control" id="excerpt" name="excerpt" rows="3"
                              placeholder="Brief description that appears in blog listings">{{ blog.excerpt if blog else '' }}</textarea>
                </div>

                <div class="mb-3">
                    <label for="content" class="form-label">Blog Content *</label>
                    <textarea class="form-control" id="content" name="content" rows="15" required>{{ blog.content if blog else '' }}</textarea>
                </div>

                <div class="mb-3">
                    <label for="image" class="form-label">Featured Image</label>
                    <input type="file" class="form-control" id="image" name="image" accept="image/*">
                    {% if blog and blog.image %}
                        <img src="{{ blog.image }}" alt="Current image" class="img-preview mt-2">
                    {% endif %}
                </div>
            </div>

            <div class="form-section">
                <div class="d-flex justify-content-between align-items-center">
                    <div class="action-buttons">
                        <button type="submit" class="btn btn-primary btn-lg">
                            <i class="fas fa-save me-2"></i>{{ action }} Blog
                        </button>
                        <a href="{{ url_for('admin_blogs') }}" class="btn btn-outline-secondary btn-lg">
                            <i class="fas fa-arrow-left me-2"></i>Cancel
                        </a>
                    </div>
                </div>
            </div>
        </form>
    </div>

    <!-- Right Column - Settings -->
    <div class="col-lg-4">
        <div class="form-section">
            <h5><i class="fas fa-cog me-2"></i>Blog Settings</h5>
            
            <div class="mb-3">
                <label for="priority" class="form-label">Priority Level</label>
                <select class="form-select" id="priority" name="priority">
                    <option value="0" {% if not blog or blog.priority == 0 %}selected{% endif %}>Normal (0)</option>
                    <option value="1" {% if blog and blog.priority == 1 %}selected{% endif %}>High (1)</option>
                    <option value="2" {% if blog and blog.priority == 2 %}selected{% endif %}>Featured (2)</option>
                </select>
                <div class="form-text">Higher priority blogs appear first in listings</div>
            </div>

            <div class="mb-3">
                <label for="sequence" class="form-label">Sequence Order</label>
                <input type="number" class="form-control" id="sequence" name="sequence" 
                       value="{{ blog.sequence if blog else 0 }}" min="0">
                <div class="form-text">Custom ordering within the same priority level</div>
            </div>

            <div class="mb-3">
                <div class="form-check form-switch">
                    <input class="form-check-input" type="checkbox" id="is_enabled" name="is_enabled" 
                           {% if blog.is_enabled|default(True) %}checked{% endif %}>
                    <label class="form-check-label fw-medium" for="is_enabled">
                        Publish Blog
                    </label>
                </div>
                <div class="form-text">Published blogs are visible on the website</div>
            </div>
        </div>

        <div class="card">
            <div class="card-header">
                <h6 class="mb-0"><i class="fas fa-lightbulb me-2"></i>SEO Tips</h6>
            </div>
            <div class="card-body">
                <ul class="list-unstyled mb-0 small">
                    <li class="mb-2"><i class="fas fa-check text-success me-2"></i>Use descriptive, keyword-rich titles</li>
                    <li class="mb-2"><i class="fas fa-check text-success me-2"></i>Write compelling excerpts</li>
                    <li class="mb-2"><i class="fas fa-check text-success me-2"></i>Include relevant images</li>
                    <li><i class="fas fa-check text-success me-2"></i>Use clean URL slugs</li>
                </ul>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(function() {
        // Initialize Summernote rich text editor
        $('#content').summernote({
            height: 400,
            toolbar: [
                ['style', ['style']],
                ['font', ['bold', 'underline', 'italic', 'clear']],
                ['fontsize', ['fontsize']],
                ['color', ['color']],
                ['para', ['ul', 'ol', 'paragraph']],
                ['table', ['table']],
                ['insert', ['link', 'picture']],
                ['view', ['fullscreen', 'codeview', 'help']]
            ]
        });

        // Auto-generate slug from title
        $('#title').on('input', function() {
            const title = $(this).val();
            const slug = title.toLowerCase()
                .replace(/[^a-z0-9 -]/g, '')
                .replace(/\s+/g, '-')
                .replace(/-+/g, '-')
                .trim('-');
            $('#slug').val(slug);
        });

        // Auto-generate excerpt from content
        $('#content').on('summernote.change', function(we, contents) {
            if (!$('#excerpt').val()) {
                const text = $(contents).text();
                $('#excerpt').val(text.substring(0, 150));
            }
        });
    });
</script>
{% endblock %}


====== templates/blogs_list.html ======
{% extends 'base.html' %}
{% block content %}
<div class="page-header">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1><i class="fas fa-blog me-3"></i>Blog Management</h1>
            <nav class="breadcrumb">
                <a href="{{ url_for('admin_dashboard') }}" class="breadcrumb-item">Dashboard</a>
                <span class="breadcrumb-item active">Blogs</span>
            </nav>
        </div>
        <div class="d-flex gap-2">
            <button class="btn btn-success export-btn" onclick="exportData()">
                <i class="fas fa-download me-2"></i>Export CSV
            </button>
            <a href="{{ url_for('admin_blog_new') }}" class="btn btn-primary">
                <i class="fas fa-plus me-2"></i>Add New Blog
            </a>
        </div>
    </div>
</div>

<div class="card">
    <div class="card-body">
        <div class="table-responsive">
            <table class="table data-table" id="blogsTable">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Category</th>
                        <th>Status</th>
                        <th>Priority</th>
                        <th>Date</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {% for blog in blogs %}
                    <tr>
                        <td>
                            <div class="fw-medium">{{ blog.title }}</div>
                            <small class="text-muted">{{ blog.excerpt[:50] if blog.excerpt else 'No excerpt' }}...</small>
                        </td>
                        <td>
                            <span class="badge bg-light text-dark">{{ blog.category }}</span>
                        </td>
                        <td>
                            <div class="form-check form-switch">
                                <input class="form-check-input toggle-enabled" type="checkbox" 
                                       data-id="{{ blog.id }}" {% if blog.is_enabled %}checked{% endif %}>
                                <label class="form-check-label">
                                    {% if blog.is_enabled %}
                                        <span class="badge status-active">Published</span>
                                    {% else %}
                                        <span class="badge status-inactive">Draft</span>
                                    {% endif %}
                                </label>
                            </div>
                        </td>
                        <td>
                            <span class="badge bg-primary">{{ blog.priority }}</span>
                        </td>
                        <td>{{ blog.date.strftime('%Y-%m-%d') if blog.date else 'N/A' }}</td>
                        <td>
                            <div class="table-actions">
                                <a href="{{ url_for('admin_blog_edit', id=blog.id) }}" 
                                   class="btn btn-sm btn-outline-primary" title="Edit">
                                    <i class="fas fa-edit"></i>
                                </a>
                                <a href="{{ url_for('admin_blog_delete', id=blog.id) }}" 
                                   class="btn btn-sm btn-outline-danger" title="Delete"
                                   onclick="return confirm('Are you sure you want to delete this blog?');">
                                    <i class="fas fa-trash"></i>
                                </a>
                            </div>
                        </td>
                    </tr>
                    {% else %}
                    <tr>
                        <td colspan="6" class="text-center text-muted py-4">No blogs found.</td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    </div>
</div>

<script>
    $(document).ready(function() {
        $('#blogsTable').DataTable({
            responsive: true,
            pageLength: 25,
            order: [[4, 'desc']], // Sort by date
            columnDefs: [
                { orderable: false, targets: [2, 5] } // Disable sorting for status and actions
            ]
        });
    });

    // Toggle blog status
    document.querySelectorAll('.toggle-enabled').forEach(toggle => {
        toggle.addEventListener('change', function() {
            const id = this.getAttribute('data-id');
            const isEnabled = this.checked;
            
            fetch('/admin/toggle_blog', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ id: id, is_enabled: isEnabled })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Update badge
                    const label = this.nextElementSibling.querySelector('.badge');
                    if (this.checked) {
                        label.className = 'badge status-active';
                        label.textContent = 'Published';
                    } else {
                        label.className = 'badge status-inactive';
                        label.textContent = 'Draft';
                    }
                } else {
                    alert('Failed to update blog status');
                    this.checked = !isEnabled; // Revert
                }
            })
            .catch(error => {
                console.error('Error:', error);
                this.checked = !isEnabled; // Revert
            });
        });
    });

    function exportData() {
        const table = $('#blogsTable').DataTable();
        const data = table.rows({search: 'applied'}).data().toArray();
        
        let csv = 'Title,Category,Status,Priority,Date\n';
        data.forEach(row => {
            const cells = $(row).find('td');
            const title = $(cells[0]).find('.fw-medium').text().trim();
            const category = $(cells[1]).text().trim();
            const status = $(cells[2]).find('.badge').text().trim();
            const priority = $(cells[3]).text().trim();
            const date = $(cells[4]).text().trim();
            
            csv += `"${title}","${category}","${status}","${priority}","${date}"\n`;
        });
        
        const blob = new Blob([csv], { type: 'text/csv' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'blogs_export.csv';
        a.click();
        window.URL.revokeObjectURL(url);
    }
</script>
{% endblock %}


====== templates/dashboard.html ======
{% extends 'base.html' %}
{% block content %}
<div class="page-header">
    <h1><i class="fas fa-tachometer-alt me-3"></i>Dashboard Overview</h1>
    <nav class="breadcrumb">
        <span class="breadcrumb-item active">Dashboard</span>
    </nav>
</div>

<!-- Quick Stats Widgets -->
<div class="row mb-4">
    <div class="col-lg-3 col-md-6 mb-3">
        <a href="{{ url_for('admin_jobs') }}" class="widget-card">
            <div class="widget-icon">
                <i class="fas fa-briefcase"></i>
            </div>
            <div class="widget-number">{{ job_count }}</div>
            <div class="widget-label">Total Jobs</div>
        </a>
    </div>
    
    <div class="col-lg-3 col-md-6 mb-3">
        <a href="{{ url_for('admin_departments') }}" class="widget-card secondary">
            <div class="widget-icon">
                <i class="fas fa-building"></i>
            </div>
            <div class="widget-number">{{ department_count }}</div>
            <div class="widget-label">Active Departments</div>
        </a>
    </div>
    
    <div class="col-lg-3 col-md-6 mb-3">
        <a href="{{ url_for('admin_applications') }}" class="widget-card warning">
            <div class="widget-icon">
                <i class="fas fa-file-alt"></i>
            </div>
            <div class="widget-number">{{ application_count }}</div>
            <div class="widget-label">New Applications Today</div>
        </a>
    </div>
    
    <div class="col-lg-3 col-md-6 mb-3">
        <a href="{{ url_for('admin_employee_testimonials') }}" class="widget-card info">
            <div class="widget-icon">
                <i class="fas fa-star"></i>
            </div>
            <div class="widget-number">{{ testimonial_count }}</div>
            <div class="widget-label">Testimonials Count</div>
        </a>
    </div>
</div>

<div class="row mb-4">
    <div class="col-lg-3 col-md-6 mb-3">
        <a href="{{ url_for('admin_teams') }}" class="widget-card success">
            <div class="widget-icon">
                <i class="fas fa-users"></i>
            </div>
            <div class="widget-number">{{ team_count }}</div>
            <div class="widget-label">Teams Count</div>
        </a>
    </div>
    
    <div class="col-lg-3 col-md-6 mb-3">
        <a href="{{ url_for('admin_enquiries') }}" class="widget-card danger">
            <div class="widget-icon">
                <i class="fas fa-envelope"></i>
            </div>
            <div class="widget-number">{{ enquiry_count }}</div>
            <div class="widget-label">New Enquiries</div>
        </a>
    </div>
    
    <div class="col-lg-3 col-md-6 mb-3">
        <div class="stat-card">
            <div class="stat-number">{{ visit_count }}</div>
            <div class="stat-label">Total Site Visits</div>
        </div>
    </div>
    
    <div class="col-lg-3 col-md-6 mb-3">
        <div class="stat-card">
            <div class="stat-number">{{ blog_count }}</div>
            <div class="stat-label">Published Blogs</div>
        </div>
    </div>
</div>

<!-- Analytics Section -->
<div class="row">
    <div class="col-lg-8">
        <div class="card">
            <div class="card-header">
                <h4><i class="fas fa-chart-bar me-2"></i>Website Analytics</h4>
            </div>
            <div class="card-body">
                <canvas id="analyticsChart" height="100"></canvas>
            </div>
        </div>
    </div>
    
    <div class="col-lg-4">
        <div class="card">
            <div class="card-header">
                <h4><i class="fas fa-globe me-2"></i>Top Countries</h4>
            </div>
            <div class="card-body">
                <div class="list-group list-group-flush">
                    {% for country in top_countries %}
                    <div class="list-group-item d-flex justify-content-between align-items-center px-0">
                        <span class="fw-medium">{{ country.country or 'Unknown' }}</span>
                        <span class="badge bg-primary rounded-pill">{{ country.count }}</span>
                    </div>
                    {% endfor %}
                </div>
            </div>
        </div>
        
        <div class="card">
            <div class="card-header">
                <h4><i class="fas fa-eye me-2"></i>Popular Pages</h4>
            </div>
            <div class="card-body">
                <div class="list-group list-group-flush">
                    {% for page in top_pages %}
                    <div class="list-group-item d-flex justify-content-between align-items-center px-0">
                        <span class="fw-medium">{{ page.page.title() }}</span>
                        <span class="badge bg-secondary rounded-pill">{{ page.count }}</span>
                    </div>
                    {% endfor %}
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    // Analytics Chart
    const ctx = document.getElementById('analyticsChart').getContext('2d');
    new Chart(ctx, {
        type: 'line',
        data: {
            labels: [{% for country in top_countries %}'{{ country.country or 'Unknown' }}'{% if not loop.last %},{% endif %}{% endfor %}],
            datasets: [{
                label: 'Visits by Country',
                data: [{% for country in top_countries %}{{ country.count }}{% if not loop.last %},{% endif %}{% endfor %}],
                backgroundColor: 'rgba(37, 99, 235, 0.1)',
                borderColor: '#2563EB',
                borderWidth: 2,
                fill: true,
                tension: 0.4
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: { 
                    beginAtZero: true,
                    grid: {
                        color: '#E5E7EB'
                    }
                },
                x: {
                    grid: {
                        color: '#E5E7EB'
                    }
                }
            },
            plugins: {
                legend: { 
                    display: false 
                }
            }
        }
    });
</script>
{% endblock %}


====== templates/department_form.html ======
{% extends 'base.html' %}
{% block content %}
<div class="page-header">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1><i class="fas fa-building me-3"></i>{{ action }} Department</h1>
            <nav class="breadcrumb">
                <a href="{{ url_for('admin_dashboard') }}" class="breadcrumb-item">Dashboard</a>
                <a href="{{ url_for('admin_departments') }}" class="breadcrumb-item">Departments</a>
                <span class="breadcrumb-item active">{{ action }}</span>
            </nav>
        </div>
    </div>
</div>

<div class="row">
    <!-- Left Column - Main Form -->
    <div class="col-lg-8">
        <form method="POST">
            <div class="form-section">
                <h5><i class="fas fa-info-circle me-2"></i>Department Information</h5>
                
                <div class="mb-3">
                    <label for="name" class="form-label">Department Name *</label>
                    <input type="text" class="form-control" id="name" name="name" 
                           value="{{ department.name | default('') }}" required
                           placeholder="e.g. Human Resources">
                </div>

                <div class="mb-3">
                    <label for="description" class="form-label">Description</label>
                    <textarea class="form-control" id="description" name="description" rows="4"
                              placeholder="Brief description of the department's role and responsibilities">{{ department.description | default('') }}</textarea>
                </div>
            </div>

            <div class="form-section">
                <div class="d-flex justify-content-between align-items-center">
                    <div class="action-buttons">
                        <button type="submit" class="btn btn-primary btn-lg">
                            <i class="fas fa-save me-2"></i>{{ action }} Department
                        </button>
                        <a href="{{ url_for('admin_departments') }}" class="btn btn-outline-secondary btn-lg">
                            <i class="fas fa-arrow-left me-2"></i>Cancel
                        </a>
                    </div>
                </div>
            </div>
        </form>
    </div>

    <!-- Right Column - Settings -->
    <div class="col-lg-4">
        <div class="form-section">
            <h5><i class="fas fa-toggle-on me-2"></i>Department Settings</h5>
            
            <div class="mb-3">
                <div class="form-check form-switch">
                    <input class="form-check-input" type="checkbox" id="status" name="status" 
                           {% if department.status == 'Active' or not department.status %}checked{% endif %}>
                    <label class="form-check-label fw-medium" for="status">
                        Active Department
                    </label>
                </div>
                <div class="form-text">Active departments appear in job listings and are available for assignment</div>
            </div>
        </div>

        <div class="card">
            <div class="card-header">
                <h6 class="mb-0"><i class="fas fa-info-circle me-2"></i>Department Guidelines</h6>
            </div>
            <div class="card-body">
                <ul class="list-unstyled mb-0 small">
                    <li class="mb-2"><i class="fas fa-check text-success me-2"></i>Use clear, descriptive names</li>
                    <li class="mb-2"><i class="fas fa-check text-success me-2"></i>Avoid abbreviations if possible</li>
                    <li class="mb-2"><i class="fas fa-check text-success me-2"></i>Include main function in description</li>
                    <li><i class="fas fa-check text-success me-2"></i>Keep active departments organized</li>
                </ul>
            </div>
        </div>
    </div>
</div>
{% endblock %}


====== templates/departments_list.html ======
{% extends 'base.html' %}
{% block content %}
<div class="page-header">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1><i class="fas fa-building me-3"></i>Departments</h1>
            <nav class="breadcrumb">
                <a href="{{ url_for('admin_dashboard') }}" class="breadcrumb-item">Dashboard</a>
                <span class="breadcrumb-item active">Departments</span>
            </nav>
        </div>
        <div class="d-flex gap-2">
            <button class="btn btn-success export-btn" onclick="exportData()">
                <i class="fas fa-download me-2"></i>Export CSV
            </button>
            <a href="{{ url_for('admin_department_new') }}" class="btn btn-primary">
                <i class="fas fa-plus me-2"></i>Add Department
            </a>
        </div>
    </div>
</div>

<div class="card">
    <div class="card-body">
        <div class="table-responsive">
            <table class="table data-table" id="departmentsTable">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Description</th>
                        <th>Status</th>
                        <th>Created Date</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {% for dept in departments %}
                    <tr>
                        <td>
                            <div class="fw-medium">{{ dept.name }}</div>
                        </td>
                        <td>{{ dept.description or 'No description available' }}</td>
                        <td>
                            {% if dept.status == 'Active' %}
                                <span class="badge status-active">Active</span>
                            {% else %}
                                <span class="badge status-inactive">Inactive</span>
                            {% endif %}
                        </td>
                        <td>{{ dept.created_at.strftime('%Y-%m-%d') if dept.created_at else 'N/A' }}</td>
                        <td>
                            <div class="table-actions">
                                <a href="{{ url_for('admin_department_edit', id=dept.id) }}" 
                                   class="btn btn-sm btn-outline-primary" title="Edit">
                                    <i class="fas fa-edit"></i>
                                </a>
                                <a href="{{ url_for('admin_department_delete', id=dept.id) }}" 
                                   class="btn btn-sm btn-outline-danger" title="Delete"
                                   onclick="return confirm('Are you sure you want to delete this department?');">
                                    <i class="fas fa-trash"></i>
                                </a>
                            </div>
                        </td>
                    </tr>
                    {% else %}
                    <tr>
                        <td colspan="5" class="text-center text-muted py-4">No departments found.</td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    </div>
</div>

<script>
    $(document).ready(function() {
        $('#departmentsTable').DataTable({
            responsive: true,
            pageLength: 25,
            order: [[0, 'asc']] // Sort by name
        });
    });

    function exportData() {
        const table = $('#departmentsTable').DataTable();
        const data = table.rows({search: 'applied'}).data().toArray();
        
        let csv = 'Name,Description,Status,Created Date\n';
        data.forEach(row => {
            const cells = $(row).find('td');
            const name = $(cells[0]).text().trim();
            const description = $(cells[1]).text().trim();
            const status = $(cells[2]).text().trim();
            const date = $(cells[3]).text().trim();
            
            csv += `"${name}","${description}","${status}","${date}"\n`;
        });
        
        const blob = new Blob([csv], { type: 'text/csv' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'departments_export.csv';
        a.click();
        window.URL.revokeObjectURL(url);
    }
</script>
{% endblock %}


====== templates/employee_testimonial_form.html ======
{% extends 'base.html' %}
{% block content %}
<div class="container mt-5">
    <h2>{{ action }} Employee Testimonial</h2>
    <form method="POST">
        <div class="row">
            <div class="col-md-6">
                <div class="mb-3">
                    <label for="employee_name" class="form-label">Employee Name</label>
                    <input type="text" class="form-control" id="employee_name" name="employee_name" 
                           value="{{ testimonial.employee_name | default('') }}" required>
                </div>
            </div>
            <div class="col-md-6">
                <div class="mb-3">
                    <label for="job_role" class="form-label">Job Role</label>
                    <input type="text" class="form-control" id="job_role" name="job_role" 
                           value="{{ testimonial.job_role | default('') }}" required>
                </div>
            </div>
        </div>
        
        <div class="mb-3">
            <label for="feedback" class="form-label">Feedback/Quote</label>
            <textarea class="form-control" id="feedback" name="feedback" rows="4" required>{{ testimonial.feedback | default('') }}</textarea>
        </div>
        
        <div class="row">
            <div class="col-md-6">
                <div class="mb-3">
                    <label for="rating" class="form-label">Rating (1-5 stars)</label>
                    <select class="form-control" id="rating" name="rating">
                        <option value="1" {% if testimonial.rating == 1 %}selected{% endif %}>1 Star</option>
                        <option value="2" {% if testimonial.rating == 2 %}selected{% endif %}>2 Stars</option>
                        <option value="3" {% if testimonial.rating == 3 %}selected{% endif %}>3 Stars</option>
                        <option value="4" {% if testimonial.rating == 4 %}selected{% endif %}>4 Stars</option>
                        <option value="5" {% if testimonial.rating == 5 or not testimonial.rating %}selected{% endif %}>5 Stars</option>
                    </select>
                </div>
            </div>
            <div class="col-md-6">
                <div class="mb-3">
                    <div class="form-check mt-4">
                        <input class="form-check-input" type="checkbox" id="status" name="status" {% if testimonial.status %}checked{% endif %}>
                        <label class="form-check-label" for="status">
                            Active (Show on website)
                        </label>
                    </div>
                </div>
            </div>
        </div>
        
        <button type="submit" class="btn btn-primary">{{ action }} Testimonial</button>
        <a href="{{ url_for('admin_employee_testimonials') }}" class="btn btn-secondary">Cancel</a>
    </form>
</div>
{% endblock %}


====== templates/employee_testimonials_list.html ======
{% extends 'base.html' %}
{% block content %}
<div class="page-header">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1><i class="fas fa-star me-3"></i>Employee Testimonials</h1>
            <nav class="breadcrumb">
                <a href="{{ url_for('admin_dashboard') }}" class="breadcrumb-item">Dashboard</a>
                <span class="breadcrumb-item active">Employee Testimonials</span>
            </nav>
        </div>
        <div class="d-flex gap-2">
            <button class="btn btn-success export-btn" onclick="exportData()">
                <i class="fas fa-download me-2"></i>Export CSV
            </button>
            <a href="{{ url_for('admin_employee_testimonial_new') }}" class="btn btn-primary">
                <i class="fas fa-plus me-2"></i>Add Testimonial
            </a>
        </div>
    </div>
</div>

<div class="card">
    <div class="card-body">
        <div class="table-responsive">
            <table class="table data-table" id="testimonialsTable">
                <thead>
                    <tr>
                        <th>Employee Name</th>
                        <th>Job Role</th>
                        <th>Feedback</th>
                        <th>Rating</th>
                        <th>Status</th>
                        <th>Created Date</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {% for testimonial in testimonials %}
                    <tr>
                        <td>
                            <div class="fw-medium">{{ testimonial.employee_name }}</div>
                        </td>
                        <td>{{ testimonial.job_role }}</td>
                        <td>
                            <div class="text-truncate" style="max-width: 200px;" title="{{ testimonial.feedback }}">
                                {{ testimonial.feedback[:100] }}{% if testimonial.feedback|length > 100 %}...{% endif %}
                            </div>
                        </td>
                        <td>
                            <div class="text-warning">
                                {% for i in range(testimonial.rating) %}
                                    <i class="fas fa-star"></i>
                                {% endfor %}
                                {% for i in range(5 - testimonial.rating) %}
                                    <i class="far fa-star"></i>
                                {% endfor %}
                            </div>
                        </td>
                        <td>
                            {% if testimonial.status %}
                                <span class="badge status-active">Active</span>
                            {% else %}
                                <span class="badge status-inactive">Inactive</span>
                            {% endif %}
                        </td>
                        <td>{{ testimonial.created_at.strftime('%Y-%m-%d') if testimonial.created_at else 'N/A' }}</td>
                        <td>
                            <div class="table-actions">
                                <a href="{{ url_for('admin_employee_testimonial_edit', id=testimonial.id) }}" 
                                   class="btn btn-sm btn-outline-primary" title="Edit">
                                    <i class="fas fa-edit"></i>
                                </a>
                                <form method="POST" action="{{ url_for('admin_employee_testimonial_delete', id=testimonial.id) }}" 
                                      class="d-inline" onsubmit="return confirm('Are you sure you want to delete this testimonial?');">
                                    <button type="submit" class="btn btn-sm btn-outline-danger" title="Delete">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </form>
                            </div>
                        </td>
                    </tr>
                    {% else %}
                    <tr>
                        <td colspan="7" class="text-center text-muted py-4">No employee testimonials found.</td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    </div>
</div>

<script>
    $(document).ready(function() {
        $('#testimonialsTable').DataTable({
            responsive: true,
            pageLength: 25,
            order: [[5, 'desc']], // Sort by created date
            columnDefs: [
                { orderable: false, targets: [6] } // Disable sorting for actions
            ]
        });
    });

    function exportData() {
        const table = $('#testimonialsTable').DataTable();
        const data = table.rows({search: 'applied'}).data().toArray();
        
        let csv = 'Employee Name,Job Role,Feedback,Rating,Status,Created Date\n';
        data.forEach(row => {
            const cells = $(row).find('td');
            const name = $(cells[0]).find('.fw-medium').text().trim();
            const role = $(cells[1]).text().trim();
            const feedback = $(cells[2]).text().trim();
            const rating = $(cells[3]).find('.fa-star').length;
            const status = $(cells[4]).text().trim();
            const date = $(cells[5]).text().trim();
            
            csv += `"${name}","${role}","${feedback}","${rating}","${status}","${date}"\n`;
        });
        
        const blob = new Blob([csv], { type: 'text/csv' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'employee_testimonials_export.csv';
        a.click();
        window.URL.revokeObjectURL(url);
    }
</script>
{% endblock %}


====== templates/enquiries_list.html ======
{% extends 'base.html' %}
{% block content %}
<div class="page-header">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1><i class="fas fa-envelope me-3"></i>Customer Enquiries</h1>
            <nav class="breadcrumb">
                <a href="{{ url_for('admin_dashboard') }}" class="breadcrumb-item">Dashboard</a>
                <span class="breadcrumb-item active">Enquiries</span>
            </nav>
        </div>
        <div class="d-flex gap-2">
            <button class="btn btn-success export-btn" onclick="exportData()">
                <i class="fas fa-download me-2"></i>Export Excel
            </button>
        </div>
    </div>
</div>

<div class="card">
    <div class="card-body">
        <div class="table-responsive">
            <table class="table data-table" id="enquiriesTable">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Phone</th>
                        <th>Message</th>
                        <th>Date</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {% for enquiry in enquiries %}
                    <tr>
                        <td>
                            <div class="fw-medium">{{ enquiry.name }}</div>
                        </td>
                        <td>
                            <a href="mailto:{{ enquiry.email }}" class="text-decoration-none">
                                {{ enquiry.email }}
                            </a>
                        </td>
                        <td>
                            {% if enquiry.phone %}
                                <a href="tel:{{ enquiry.phone }}" class="text-decoration-none">
                                    {{ enquiry.phone }}
                                </a>
                            {% else %}
                                <span class="text-muted">N/A</span>
                            {% endif %}
                        </td>
                        <td>
                            <div class="text-truncate" style="max-width: 300px;" title="{{ enquiry.message }}">
                                {{ enquiry.message[:100] }}{% if enquiry.message|length > 100 %}...{% endif %}
                            </div>
                        </td>
                        <td>{{ enquiry.date.strftime('%Y-%m-%d %H:%M') if enquiry.date else 'N/A' }}</td>
                        <td>
                            <div class="table-actions">
                                <button class="btn btn-sm btn-outline-info" onclick="viewEnquiry({{ enquiry.id }})" title="View Full Message">
                                    <i class="fas fa-eye"></i>
                                </button>
                                <a href="mailto:{{ enquiry.email }}" class="btn btn-sm btn-outline-success" title="Reply via Email">
                                    <i class="fas fa-reply"></i>
                                </a>
                            </div>
                        </td>
                    </tr>
                    {% else %}
                    <tr>
                        <td colspan="6" class="text-center text-muted py-4">No enquiries found.</td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Enquiry Details Modal -->
<div class="modal fade" id="enquiryModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title"><i class="fas fa-envelope me-2"></i>Enquiry Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="enquiryDetails">
                <!-- Enquiry details will be loaded here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(function() {
        $('#enquiriesTable').DataTable({
            responsive: true,
            pageLength: 25,
            order: [[4, 'desc']], // Sort by date
            columnDefs: [
                { orderable: false, targets: [5] } // Disable sorting for actions
            ]
        });
    });

    function viewEnquiry(id) {
        // Find the enquiry data from the table
        const enquiries = {{ enquiries | tojson }};
        const enquiry = enquiries.find(e => e.id === id);
        
        if (enquiry) {
            document.getElementById('enquiryDetails').innerHTML = `
                <div class="row">
                    <div class="col-md-6">
                        <h6>Contact Information:</h6>
                        <p><strong>Name:</strong> ${enquiry.name}</p>
                        <p><strong>Email:</strong> <a href="mailto:${enquiry.email}">${enquiry.email}</a></p>
                        <p><strong>Phone:</strong> ${enquiry.phone || 'Not provided'}</p>
                        <p><strong>Date:</strong> ${new Date(enquiry.date).toLocaleString()}</p>
                    </div>
                    <div class="col-md-6">
                        <h6>Message:</h6>
                        <div class="p-3 bg-light rounded">
                            ${enquiry.message}
                        </div>
                    </div>
                </div>
            `;
        }
        
        const modal = new bootstrap.Modal(document.getElementById('enquiryModal'));
        modal.show();
    }

    function exportData() {
        const table = $('#enquiriesTable').DataTable();
        const data = table.rows({search: 'applied'}).data().toArray();
        
        let csv = 'Name,Email,Phone,Message,Date\n';
        data.forEach(row => {
            const cells = $(row).find('td');
            const name = $(cells[0]).find('.fw-medium').text().trim();
            const email = $(cells[1]).text().trim();
            const phone = $(cells[2]).text().trim();
            const message = $(cells[3]).attr('title') || $(cells[3]).text().trim();
            const date = $(cells[4]).text().trim();
            
            csv += `"${name}","${email}","${phone}","${message.replace(/"/g, '""')}","${date}"\n`;
        });
        
        const blob = new Blob([csv], { type: 'text/csv' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'enquiries_export.csv';
        a.click();
        window.URL.revokeObjectURL(url);
    }
</script>
{% endblock %}


====== templates/job_form.html ======
{% extends 'base.html' %}
{% block content %}
<div class="page-header">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1><i class="fas fa-briefcase me-3"></i>{{ action }} Job Opening</h1>
            <nav class="breadcrumb">
                <a href="{{ url_for('admin_dashboard') }}" class="breadcrumb-item">Dashboard</a>
                <a href="{{ url_for('admin_jobs') }}" class="breadcrumb-item">Jobs</a>
                <span class="breadcrumb-item active">{{ action }}</span>
            </nav>
        </div>
    </div>
</div>

<div class="row">
    <!-- Left Column - Main Form -->
    <div class="col-lg-8">
        <form method="POST" enctype="multipart/form-data">
            <div class="form-section">
                <h5><i class="fas fa-info-circle me-2"></i>Job Information</h5>
                
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label for="title" class="form-label">Job Title *</label>
                        <input type="text" class="form-control" id="title" name="title" 
                               value="{{ job.title | default('') }}" required 
                               placeholder="e.g. Senior Software Developer">
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="department_id" class="form-label">Department</label>
                        <select class="form-select" id="department_id" name="department_id">
                            <option value="">Select Department</option>
                            {% for dept in departments %}
                            <option value="{{ dept.id }}" {% if job.department_id == dept.id %}selected{% endif %}>
                                {{ dept.name }}
                            </option>
                            {% endfor %}
                        </select>
                    </div>
                </div>

                <div class="mb-3">
                    <label for="description" class="form-label">Job Description *</label>
                    <textarea class="form-control" id="description" name="description" rows="10" required>{{ job.description | default('') }}</textarea>
                    <div class="form-text">Use the rich text editor to format the job description</div>
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label for="location" class="form-label">Work Location *</label>
                        <select class="form-select" id="location" name="location" required>
                            <option value="">Select Location</option>
                            <option value="Work From Office" {% if job.location == 'Work From Office' %}selected{% endif %}>
                                Work From Office
                            </option>
                            <option value="Hybrid" {% if job.location == 'Hybrid' %}selected{% endif %}>
                                Hybrid
                            </option>
                            <option value="Remote" {% if job.location == 'Remote' %}selected{% endif %}>
                                Remote
                            </option>
                        </select>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="type" class="form-label">Employment Type *</label>
                        <select class="form-select" id="type" name="type" required>
                            <option value="">Select Type</option>
                            <option value="Full-Time" {% if job.type == 'Full-Time' %}selected{% endif %}>
                                Full-Time
                            </option>
                            <option value="Part-Time" {% if job.type == 'Part-Time' %}selected{% endif %}>
                                Part-Time
                            </option>
                            <option value="Contract" {% if job.type == 'Contract' %}selected{% endif %}>
                                Contract
                            </option>
                            <option value="Internship" {% if job.type == 'Internship' %}selected{% endif %}>
                                Internship
                            </option>
                        </select>
                    </div>
                </div>
            </div>

            <div class="form-section">
                <div class="d-flex justify-content-between align-items-center">
                    <div class="action-buttons">
                        <button type="submit" class="btn btn-primary btn-lg">
                            <i class="fas fa-save me-2"></i>{{ action }} Job
                        </button>
                        <a href="{{ url_for('admin_jobs') }}" class="btn btn-outline-secondary btn-lg">
                            <i class="fas fa-arrow-left me-2"></i>Cancel
                        </a>
                    </div>
                </div>
            </div>
        </form>
    </div>

    <!-- Right Column - Settings -->
    <div class="col-lg-4">
        <div class="form-section">
            <h5><i class="fas fa-toggle-on me-2"></i>Job Settings</h5>
            
            <div class="mb-3">
                <div class="form-check form-switch">
                    <input class="form-check-input" type="checkbox" id="status" name="status" 
                           {% if job.status == 'Active' %}checked{% endif %}>
                    <label class="form-check-label fw-medium" for="status">
                        Active (Visible on website)
                    </label>
                </div>
                <div class="form-text">Toggle to show/hide this job on the public website</div>
            </div>
        </div>

        <div class="card">
            <div class="card-header">
                <h6 class="mb-0"><i class="fas fa-lightbulb me-2"></i>Quick Tips</h6>
            </div>
            <div class="card-body">
                <ul class="list-unstyled mb-0 small">
                    <li class="mb-2"><i class="fas fa-check text-success me-2"></i>Use clear, descriptive job titles</li>
                    <li class="mb-2"><i class="fas fa-check text-success me-2"></i>Include required skills and qualifications</li>
                    <li class="mb-2"><i class="fas fa-check text-success me-2"></i>Specify experience level needed</li>
                    <li><i class="fas fa-check text-success me-2"></i>Add salary range if possible</li>
                </ul>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(function() {
        // Initialize Summernote rich text editor
        $('#description').summernote({
            height: 300,
            toolbar: [
                ['style', ['style']],
                ['font', ['bold', 'underline', 'italic', 'clear']],
                ['fontsize', ['fontsize']],
                ['color', ['color']],
                ['para', ['ul', 'ol', 'paragraph']],
                ['table', ['table']],
                ['insert', ['link']],
                ['view', ['fullscreen', 'codeview', 'help']]
            ],
            styleTags: [
                'h1', 'h2', 'h3', 'p',
                { title: 'Blockquote', tag: 'blockquote', className: 'blockquote', value: 'blockquote' },
                { title: 'Code', tag: 'code', className: 'language-markup', value: 'code' }
            ]
        });

        // Auto-generate slug from title
        $('#title').on('input', function() {
            const title = $(this).val();
            const slug = title.toLowerCase()
                .replace(/[^a-z0-9 -]/g, '')
                .replace(/\s+/g, '-')
                .replace(/-+/g, '-')
                .trim('-');
            $('#slug').val(slug);
        });
    });
</script>
{% endblock %}


====== templates/jobs_list.html ======
{% extends 'base.html' %}
{% block content %}
<div class="page-header">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1><i class="fas fa-briefcase me-3"></i>Job Openings</h1>
            <nav class="breadcrumb">
                <a href="{{ url_for('admin_dashboard') }}" class="breadcrumb-item">Dashboard</a>
                <span class="breadcrumb-item active">Jobs</span>
            </nav>
        </div>
        <div class="d-flex gap-2">
            <button class="btn btn-success export-btn" onclick="exportData()">
                <i class="fas fa-download me-2"></i>Export CSV
            </button>
            <a href="{{ url_for('admin_job_new') }}" class="btn btn-primary">
                <i class="fas fa-plus me-2"></i>Add New Job
            </a>
        </div>
    </div>
</div>

<div class="card">
    <div class="card-body">
        <div class="table-responsive">
            <table class="table data-table" id="jobsTable">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Department</th>
                        <th>Location</th>
                        <th>Type</th>
                        <th>Status</th>
                        <th>Posted Date</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {% for job in jobs %}
                    <tr>
                        <td>
                            <div class="fw-medium">{{ job.title }}</div>
                        </td>
                        <td>
                            {% if job.department %}
                                <span class="badge bg-info">{{ job.department }}</span>
                            {% else %}
                                <span class="badge bg-secondary">General</span>
                            {% endif %}
                        </td>
                        <td>{{ job.location }}</td>
                        <td>
                            <span class="badge bg-light text-dark">{{ job.type }}</span>
                        </td>
                        <td>
                            <div class="form-check form-switch">
                                <input class="form-check-input toggle-status" type="checkbox" data-id="{{ job.id }}" 
                                       {% if job.status == 'Active' %}checked{% endif %}>
                                <label class="form-check-label">
                                    {% if job.status == 'Active' %}
                                        <span class="badge status-active">Active</span>
                                    {% else %}
                                        <span class="badge status-inactive">Inactive</span>
                                    {% endif %}
                                </label>
                            </div>
                        </td>
                        <td>{{ job.posted_date.strftime('%Y-%m-%d') if job.posted_date else 'N/A' }}</td>
                        <td>
                            <div class="table-actions">
                                <a href="{{ url_for('admin_job_edit', id=job.id) }}" 
                                   class="btn btn-sm btn-outline-primary" title="Edit">
                                    <i class="fas fa-edit"></i>
                                </a>
                                <a href="{{ url_for('admin_job_delete', id=job.id) }}" 
                                   class="btn btn-sm btn-outline-danger" title="Delete"
                                   onclick="return confirm('Are you sure you want to delete this job opening?');">
                                    <i class="fas fa-trash"></i>
                                </a>
                            </div>
                        </td>
                    </tr>
                    {% else %}
                    <tr>
                        <td colspan="7" class="text-center text-muted py-4">No job openings found.</td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    </div>
</div>

<script>
    // Enhanced DataTable with export functionality
    $(document).ready(function() {
        $('#jobsTable').DataTable({
            responsive: true,
            pageLength: 25,
            order: [[5, 'desc']], // Sort by date
            columnDefs: [
                { orderable: false, targets: [4, 6] } // Disable sorting for status and actions
            ]
        });
    });

    // Toggle job status
    document.querySelectorAll('.toggle-status').forEach(toggle => {
        toggle.addEventListener('change', function() {
            const id = this.getAttribute('data-id');
            const status = this.checked ? 'Active' : 'Inactive';
            
            fetch('/admin/toggle_job', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ id: id, status: status })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Update badge
                    const label = this.nextElementSibling.querySelector('.badge');
                    if (this.checked) {
                        label.className = 'badge status-active';
                        label.textContent = 'Active';
                    } else {
                        label.className = 'badge status-inactive';
                        label.textContent = 'Inactive';
                    }
                } else {
                    alert('Failed to update job status');
                    this.checked = !this.checked; // Revert
                }
            })
            .catch(error => {
                console.error('Error:', error);
                this.checked = !this.checked; // Revert
            });
        });
    });

    // Export functionality
    function exportData() {
        const table = $('#jobsTable').DataTable();
        const data = table.rows({search: 'applied'}).data().toArray();
        
        let csv = 'Title,Department,Location,Type,Status,Posted Date\n';
        data.forEach(row => {
            const cells = $(row).find('td');
            const title = $(cells[0]).text().trim();
            const department = $(cells[1]).text().trim();
            const location = $(cells[2]).text().trim();
            const type = $(cells[3]).text().trim();
            const status = $(cells[4]).find('.badge').text().trim();
            const date = $(cells[5]).text().trim();
            
            csv += `"${title}","${department}","${location}","${type}","${status}","${date}"\n`;
        });
        
        const blob = new Blob([csv], { type: 'text/csv' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'jobs_export.csv';
        a.click();
        window.URL.revokeObjectURL(url);
    }
</script>
{% endblock %}


====== templates/login.html ======
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Login - Tej IT</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
    <link rel="icon" href="{{ url_for('static', filename='favicon.ico') }}">
    <style>
        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }
        .login-container {
            max-width: 450px;
            margin: 10vh auto;
            padding: 3rem 2.5rem;
            background: white;
            border-radius: 1rem;
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        }
        .login-logo {
            text-align: center;
            margin-bottom: 2rem;
        }
        .login-logo i {
            font-size: 3rem;
            color: var(--primary-blue);
            margin-bottom: 1rem;
        }
        .login-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--text-dark);
            text-align: center;
            margin-bottom: 0.5rem;
        }
        .login-subtitle {
            text-align: center;
            color: var(--text-muted);
            margin-bottom: 2rem;
            font-size: 0.875rem;
        }
        .form-floating {
            margin-bottom: 1.5rem;
        }
        .btn-login {
            padding: 0.875rem;
            font-weight: 600;
            font-size: 1rem;
            border-radius: 0.75rem;
        }
    </style>
</head>
<body>
    <div class="login-container">
        <div class="login-logo">
            <i class="fas fa-shield-alt"></i>
            <div class="login-title">Admin Panel</div>
            <div class="login-subtitle">Sign in to access the dashboard</div>
        </div>

        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    <div class="alert alert-{{ 'danger' if category == 'danger' else 'success' if category == 'success' else 'warning' }} alert-dismissible fade show" role="alert">
                        <i class="fas fa-{{ 'exclamation-circle' if category == 'danger' else 'check-circle' if category == 'success' else 'exclamation-triangle' }} me-2"></i>
                        {{ message }}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                {% endfor %}
            {% endif %}
        {% endwith %}

        <form method="POST">
            <div class="form-floating mb-3">
                <input type="text" class="form-control" id="username" name="username" 
                       placeholder="Username" required autocomplete="username">
                <label for="username"><i class="fas fa-user me-2"></i>Username</label>
            </div>
            
            <div class="form-floating mb-3">
                <input type="password" class="form-control" id="password" name="password" 
                       placeholder="Password" required autocomplete="current-password">
                <label for="password"><i class="fas fa-lock me-2"></i>Password</label>
            </div>
            
            <button type="submit" class="btn btn-primary w-100 btn-login">
                <i class="fas fa-sign-in-alt me-2"></i>Sign In
            </button>
        </form>

        <div class="text-center mt-4">
            <small class="text-muted">
                <i class="fas fa-lock me-1"></i>
                Secured by Tej IT Systems
            </small>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Auto-dismiss alerts after 5 seconds
        setTimeout(function() {
            $('.alert').fadeOut('slow');
        }, 5000);

        // Focus first input field
        document.addEventListener('DOMContentLoaded', function() {
            document.getElementById('username').focus();
        });
    </script>
</body>
</html>


====== templates/team_form.html ======
{% extends 'base.html' %}
{% block content %}
<div class="card">
    <div class="card-header">
        <h3><i class="fas fa-users me-2"></i>{{ action }} Team Member</h3>
    </div>
    <div class="card-body">
        <form method="POST" enctype="multipart/form-data">
            <div class="mb-3">
                <label for="name" class="form-label">Name</label>
                <input type="text" class="form-control" id="name" name="name" value="{{ team.name if team else '' }}" required>
            </div>
            <div class="mb-3">
                <label for="role" class="form-label">Role</label>
                <input type="text" class="form-control" id="role" name="role" value="{{ team.role if team else '' }}" required>
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description (max 50 chars)</label>
                <textarea class="form-control" id="description" name="description" rows="2" maxlength="50">{{ team.description if team else '' }}</textarea>
            </div>
            <div class="mb-3">
                <label for="photo" class="form-label">Photo</label>
                <input type="file" class="form-control" id="photo" name="photo" accept="image/*">
                {% if team and team.photo %}
                    <img src="{{ url_for('static', filename=team.photo) }}" alt="Current Photo" class="preview">
                {% endif %}
            </div>
            <button type="submit" class="btn btn-primary"><i class="fas fa-save me-2"></i>{{ action }}</button>
        </form>
    </div>
</div>
{% endblock %}


====== templates/teams_list.html ======
{% extends 'base.html' %}
{% block content %}
<div class="page-header">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1><i class="fas fa-users-cog me-3"></i>Team Management</h1>
            <nav class="breadcrumb">
                <a href="{{ url_for('admin_dashboard') }}" class="breadcrumb-item">Dashboard</a>
                <span class="breadcrumb-item active">Teams</span>
            </nav>
        </div>
        <div class="d-flex gap-2">
            <button class="btn btn-success export-btn" onclick="exportData()">
                <i class="fas fa-download me-2"></i>Export CSV
            </button>
            <a href="{{ url_for('admin_team_new') }}" class="btn btn-primary">
                <i class="fas fa-user-plus me-2"></i>Add Team Member
            </a>
        </div>
    </div>
</div>

<div class="card">
    <div class="card-body">
        <div class="table-responsive">
            <table class="table data-table" id="teamsTable">
                <thead>
                    <tr>
                        <th>Photo</th>
                        <th>Name</th>
                        <th>Role</th>
                        <th>Description</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {% for team in teams %}
                    <tr>
                        <td>
                            {% if team.photo %}
                                <img src="{{ team.photo }}" alt="{{ team.name }}" 
                                     class="rounded-circle" width="50" height="50" style="object-fit: cover;">
                            {% else %}
                                <div class="bg-light rounded-circle d-flex align-items-center justify-content-center" 
                                     style="width: 50px; height: 50px;">
                                    <i class="fas fa-user text-muted"></i>
                                </div>
                            {% endif %}
                        </td>
                        <td>
                            <div class="fw-medium">{{ team.name }}</div>
                        </td>
                        <td>
                            <span class="badge bg-primary">{{ team.role }}</span>
                        </td>
                        <td>{{ team.description or 'No description' }}</td>
                        <td>
                            <div class="table-actions">
                                <a href="{{ url_for('admin_team_edit', id=team.id) }}" 
                                   class="btn btn-sm btn-outline-primary" title="Edit">
                                    <i class="fas fa-edit"></i>
                                </a>
                                <a href="{{ url_for('admin_team_delete', id=team.id) }}" 
                                   class="btn btn-sm btn-outline-danger" title="Delete"
                                   onclick="return confirm('Are you sure you want to delete this team member?');">
                                    <i class="fas fa-trash"></i>
                                </a>
                            </div>
                        </td>
                    </tr>
                    {% else %}
                    <tr>
                        <td colspan="5" class="text-center text-muted py-4">No team members found.</td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    </div>
</div>

<script>
    $(document).ready(function() {
        $('#teamsTable').DataTable({
            responsive: true,
            pageLength: 25,
            columnDefs: [
                { orderable: false, targets: [0, 4] } // Disable sorting for photo and actions
            ]
        });
    });

    function exportData() {
        const table = $('#teamsTable').DataTable();
        const data = table.rows({search: 'applied'}).data().toArray();
        
        let csv = 'Name,Role,Description\n';
        data.forEach(row => {
            const cells = $(row).find('td');
            const name = $(cells[1]).find('.fw-medium').text().trim();
            const role = $(cells[2]).text().trim();
            const description = $(cells[3]).text().trim();
            
            csv += `"${name}","${role}","${description}"\n`;
        });
        
        const blob = new Blob([csv], { type: 'text/csv' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'teams_export.csv';
        a.click();
        window.URL.revokeObjectURL(url);
    }
</script>
{% endblock %}


====== templates/testimonial_form.html ======
{% extends 'base.html' %}
{% block content %}
<div class="page-header">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1><i class="fas fa-quote-right me-3"></i>{{ action }} Client Testimonial</h1>
            <nav class="breadcrumb">
                <a href="{{ url_for('admin_dashboard') }}" class="breadcrumb-item">Dashboard</a>
                <a href="{{ url_for('admin_testimonials') }}" class="breadcrumb-item">Testimonials</a>
                <span class="breadcrumb-item active">{{ action }}</span>
            </nav>
        </div>
    </div>
</div>

<div class="row">
    <!-- Left Column - Main Form -->
    <div class="col-lg-8">
        <form method="POST" enctype="multipart/form-data">
            <div class="form-section">
                <h5><i class="fas fa-user me-2"></i>Client Information</h5>
                
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label for="name" class="form-label">Client Name *</label>
                        <input type="text" class="form-control" id="name" name="name" 
                               value="{{ testimonial.name if testimonial else '' }}" required
                               placeholder="Full name of the client">
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="company" class="form-label">Company Name</label>
                        <input type="text" class="form-control" id="company" name="company" 
                               value="{{ testimonial.company if testimonial else '' }}"
                               placeholder="Client's company name">
                    </div>
                </div>

                <div class="mb-3">
                    <label for="content" class="form-label">Testimonial Content *</label>
                    <textarea class="form-control" id="content" name="content" rows="5" required
                              placeholder="What did the client say about our services?">{{ testimonial.content if testimonial else '' }}</textarea>
                </div>

                <div class="mb-3">
                    <label for="image" class="form-label">Client Photo</label>
                    <input type="file" class="form-control" id="image" name="image" accept="image/*">
                    {% if testimonial and testimonial.image %}
                        <img src="{{ testimonial.image }}" alt="Current image" class="img-preview mt-2">
                    {% endif %}
                    <div class="form-text">Optional: Upload a photo of the client for added credibility</div>
                </div>
            </div>

            <div class="form-section">
                <div class="d-flex justify-content-between align-items-center">
                    <div class="action-buttons">
                        <button type="submit" class="btn btn-primary btn-lg">
                            <i class="fas fa-save me-2"></i>{{ action }} Testimonial
                        </button>
                        <a href="{{ url_for('admin_testimonials') }}" class="btn btn-outline-secondary btn-lg">
                            <i class="fas fa-arrow-left me-2"></i>Cancel
                        </a>
                    </div>
                </div>
            </div>
        </form>
    </div>

    <!-- Right Column - Settings -->
    <div class="col-lg-4">
        <div class="form-section">
            <h5><i class="fas fa-star me-2"></i>Testimonial Settings</h5>
            
            <div class="mb-3">
                <label for="rating" class="form-label">Rating</label>
                <select class="form-select" id="rating" name="rating">
                    <option value="1" {% if testimonial and testimonial.rating == 1 %}selected{% endif %}>⭐ (1 Star)</option>
                    <option value="2" {% if testimonial and testimonial.rating == 2 %}selected{% endif %}>⭐⭐ (2 Stars)</option>
                    <option value="3" {% if testimonial and testimonial.rating == 3 %}selected{% endif %}>⭐⭐⭐ (3 Stars)</option>
                    <option value="4" {% if testimonial and testimonial.rating == 4 %}selected{% endif %}>⭐⭐⭐⭐ (4 Stars)</option>
                    <option value="5" {% if not testimonial or testimonial.rating == 5 or testimonial.rating == 0 %}selected{% endif %}>⭐⭐⭐⭐⭐ (5 Stars)</option>
                </select>
            </div>

            <div class="mb-3">
                <div class="form-check form-switch">
                    <input class="form-check-input" type="checkbox" id="is_enabled" name="is_enabled" 
                           {% if testimonial.is_enabled|default(True) %}checked{% endif %}>
                    <label class="form-check-label fw-medium" for="is_enabled">
                        Publish Testimonial
                    </label>
                </div>
                <div class="form-text">Published testimonials are visible on the website</div>
            </div>
        </div>

        <div class="card">
            <div class="card-header">
                <h6 class="mb-0"><i class="fas fa-lightbulb me-2"></i>Best Practices</h6>
            </div>
            <div class="card-body">
                <ul class="list-unstyled mb-0 small">
                    <li class="mb-2"><i class="fas fa-check text-success me-2"></i>Get written permission from clients</li>
                    <li class="mb-2"><i class="fas fa-check text-success me-2"></i>Use real names and companies</li>
                    <li class="mb-2"><i class="fas fa-check text-success me-2"></i>Keep testimonials authentic</li>
                    <li><i class="fas fa-check text-success me-2"></i>Include specific results when possible</li>
                </ul>
            </div>
        </div>
    </div>
</div>
{% endblock %}


====== templates/testimonials_list.html ======
{% extends 'base.html' %}
{% block content %}
<div class="page-header">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1><i class="fas fa-quote-right me-3"></i>Client Testimonials</h1>
            <nav class="breadcrumb">
                <a href="{{ url_for('admin_dashboard') }}" class="breadcrumb-item">Dashboard</a>
                <span class="breadcrumb-item active">Client Testimonials</span>
            </nav>
        </div>
        <div class="d-flex gap-2">
            <button class="btn btn-success export-btn" onclick="exportData()">
                <i class="fas fa-download me-2"></i>Export CSV
            </button>
            <a href="{{ url_for('admin_testimonial_new') }}" class="btn btn-primary">
                <i class="fas fa-plus me-2"></i>Add Testimonial
            </a>
        </div>
    </div>
</div>

<div class="card">
    <div class="card-body">
        <div class="table-responsive">
            <table class="table data-table" id="testimonialsTable">
                <thead>
                    <tr>
                        <th>Client</th>
                        <th>Company</th>
                        <th>Rating</th>
                        <th>Status</th>
                        <th>Date</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {% for testimonial in testimonials %}
                    <tr>
                        <td>
                            <div class="d-flex align-items-center">
                                {% if testimonial.image %}
                                    <img src="{{ testimonial.image }}" alt="{{ testimonial.name }}" 
                                         class="rounded-circle me-3" width="40" height="40" style="object-fit: cover;">
                                {% else %}
                                    <div class="bg-light rounded-circle d-flex align-items-center justify-content-center me-3" 
                                         style="width: 40px; height: 40px;">
                                        <i class="fas fa-user text-muted"></i>
                                    </div>
                                {% endif %}
                                <div class="fw-medium">{{ testimonial.name }}</div>
                            </div>
                        </td>
                        <td>{{ testimonial.company or 'Not specified' }}</td>
                        <td>
                            <div class="text-warning">
                                {% if testimonial.rating %}
                                    {% for i in range(testimonial.rating) %}
                                        <i class="fas fa-star"></i>
                                    {% endfor %}
                                    {% for i in range(5 - testimonial.rating) %}
                                        <i class="far fa-star"></i>
                                    {% endfor %}
                                {% else %}
                                    <span class="text-muted">No rating</span>
                                {% endif %}
                            </div>
                        </td>
                        <td>
                            <div class="form-check form-switch">
                                <input class="form-check-input toggle-enabled" type="checkbox" 
                                       data-id="{{ testimonial.id }}" {% if testimonial.is_enabled %}checked{% endif %}>
                                <label class="form-check-label">
                                    {% if testimonial.is_enabled %}
                                        <span class="badge status-active">Published</span>
                                    {% else %}
                                        <span class="badge status-inactive">Draft</span>
                                    {% endif %}
                                </label>
                            </div>
                        </td>
                        <td>{{ testimonial.date.strftime('%Y-%m-%d') if testimonial.date else 'N/A' }}</td>
                        <td>
                            <div class="table-actions">
                                <a href="{{ url_for('admin_testimonial_edit', id=testimonial.id) }}" 
                                   class="btn btn-sm btn-outline-primary" title="Edit">
                                    <i class="fas fa-edit"></i>
                                </a>
                                <form method="POST" action="{{ url_for('admin_testimonial_delete', id=testimonial.id) }}" 
                                      class="d-inline" onsubmit="return confirm('Are you sure you want to delete this testimonial?');">
                                    <button type="submit" class="btn btn-sm btn-outline-danger" title="Delete">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </form>
                            </div>
                        </td>
                    </tr>
                    {% else %}
                    <tr>
                        <td colspan="6" class="text-center text-muted py-4">No testimonials found.</td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script>
    $(document).ready(function() {
        $('#testimonialsTable').DataTable({
            responsive: true,
            pageLength: 25,
            order: [[4, 'desc']], // Sort by date
            columnDefs: [
                { orderable: false, targets: [3, 5] } // Disable sorting for status and actions
            ]
        });
    });

    // Toggle testimonial status
    document.querySelectorAll('.toggle-enabled').forEach(toggle => {
        toggle.addEventListener('change', function() {
            const id = this.getAttribute('data-id');
            const isEnabled = this.checked;
            
            fetch('/admin/toggle_testimonial', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ id: id, is_enabled: isEnabled })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Update badge
                    const label = this.nextElementSibling.querySelector('.badge');
                    if (this.checked) {
                        label.className = 'badge status-active';
                        label.textContent = 'Published';
                    } else {
                        label.className = 'badge status-inactive';
                        label.textContent = 'Draft';
                    }
                } else {
                    alert('Failed to update testimonial status');
                    this.checked = !isEnabled; // Revert
                }
            })
            .catch(error => {
                console.error('Error:', error);
                this.checked = !isEnabled; // Revert
            });
        });
    });

    function exportData() {
        const table = $('#testimonialsTable').DataTable();
        const data = table.rows({search: 'applied'}).data().toArray();
        
        let csv = 'Client Name,Company,Rating,Status,Date\n';
        data.forEach(row => {
            const cells = $(row).find('td');
            const name = $(cells[0]).find('.fw-medium').text().trim();
            const company = $(cells[1]).text().trim();
            const rating = $(cells[2]).find('.fa-star').length;
            const status = $(cells[3]).find('.badge').text().trim();
            const date = $(cells[4]).text().trim();
            
            csv += `"${name}","${company}","${rating}","${status}","${date}"\n`;
        });
        
        const blob = new Blob([csv], { type: 'text/csv' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'testimonials_export.csv';
        a.click();
        window.URL.revokeObjectURL(url);
    }
</script>
{% endblock %}


====== static/css/style.css ======
/* Modern Admin Dashboard Styles */
:root {
    --primary-blue: #2563EB;
    --secondary-teal: #14B8A6;
    --sidebar-light: #F3F4F6;
    --text-dark: #1F2937;
    --text-muted: #6B7280;
    --bg-light: #F9FAFB;
    --border-light: #E5E7EB;
    --shadow-sm: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
    --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    --border-radius: 0.75rem;
    --border-radius-sm: 0.5rem;
}

* {
    box-sizing: border-box;
}

body {
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
    background-color: var(--bg-light);
    color: var(--text-dark);
    line-height: 1.6;
    margin: 0;
    overflow-x: hidden;
    max-width: 100vw; /* Prevent horizontal overflow */
}

/* Top Navigation */
.navbar {
    box-shadow: var(--shadow-sm);
    border-bottom: 1px solid var(--border-light) !important;
    padding: 0.75rem 0;
    z-index: 1040;
    position: fixed;
    top: 0;
    width: 100%;
    background-color: white;
}

.navbar-brand {
    color: var(--text-dark) !important;
    font-weight: 700;
    font-size: 1.25rem;
}

@media (max-width: 575.98px) {
    .navbar-brand {
        font-size: 1rem;
    }
}

/* Sidebar */
.sidebar {
    width: 280px;
    min-height: calc(100vh - 76px);
    background-color: var(--sidebar-light);
    border-right: 1px solid var(--border-light);
    transition: all 0.3s ease;
    position: fixed;
    top: 76px;
    left: 0;
    z-index: 1030;
}

.sidebar.collapsed {
    width: 80px;
}

.sidebar.collapsed .nav-header,
.sidebar.collapsed .nav-link span {
    opacity: 0;
    pointer-events: none;
}

.sidebar-content {
    padding: 1.5rem 0;
}

@media (max-width: 991.98px) {
    .sidebar {
        transform: translateX(-100%);
    }
    .sidebar.show {
        transform: translateX(0);
        width: 250px; /* Adjusted for mobile */
    }
}

/* Navigation Sections */
.nav-section {
    margin-bottom: 2rem;
}

.nav-header {
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    color: var(--text-muted);
    margin-bottom: 0.75rem;
    padding: 0 1.5rem;
}

.nav-link {
    display: flex;
    align-items: center;
    padding: 0.75rem 1.5rem;
    color: var(--text-dark);
    text-decoration: none;
    border-radius: 0.5rem;
    margin: 0.25rem 1rem;
    font-weight: 500;
    transition: all 0.2s ease;
    position: relative;
}

.nav-link i {
    width: 20px;
    margin-right: 0.75rem;
    text-align: center;
    font-size: 1rem;
}

.nav-link:hover {
    background-color: rgba(37, 99, 235, 0.1);
    color: var(--primary-blue);
}

.nav-link.active {
    background-color: var(--primary-blue);
    color: white;
}

.nav-link.active:hover {
    background-color: var(--primary-blue);
    color: white;
}

/* Main Content */
.main-content {
    padding: 1rem; /* Reduced from 2rem for smaller screens */
    transition: all 0.3s ease;
    min-height: calc(100vh - 76px);
    width: 100%;
}

@media (min-width: 992px) {
    .main-content {
        padding: 2rem;
        margin-left: 280px;
    }
    .main-content.sidebar-collapsed {
        margin-left: 80px;
    }
}

@media (max-width: 991.98px) {
    .main-content {
        margin-left: 0 !important;
    }
}

/* Cards and Widgets */
.card {
    border: none;
    border-radius: var(--border-radius);
    box-shadow: var(--shadow-sm);
    margin-bottom: 1.5rem;
    transition: all 0.2s ease;
}

.card:hover {
    box-shadow: var(--shadow-md);
}

.card-header {
    background-color: white;
    border-bottom: 1px solid var(--border-light);
    border-radius: var(--border-radius) var(--border-radius) 0 0 !important;
    padding: 1.25rem 1.5rem;
}

.card-header h3, .card-header h4 {
    margin: 0;
    font-weight: 600;
    color: var(--text-dark);
    font-size: 1.125rem;
}

.card-body {
    padding: 1.5rem;
}

@media (max-width: 767.98px) {
    .card-body {
        padding: 1rem;
    }
    .card-header {
        padding: 1rem 1.25rem;
    }
}

/* Dashboard Widgets */
.widget-card {
    background: linear-gradient(135deg, var(--primary-blue), #3B82F6);
    color: white;
    border-radius: var(--border-radius);
    padding: 1.5rem;
    text-decoration: none;
    display: block;
    transition: all 0.3s ease;
    border: none;
    box-shadow: var(--shadow-md);
}

.widget-card:hover {
    transform: translateY(-4px);
    box-shadow: var(--shadow-lg);
    color: white;
    text-decoration: none;
}

.widget-card.secondary {
    background: linear-gradient(135deg, var(--secondary-teal), #10B981);
}

.widget-card.warning {
    background: linear-gradient(135deg, #F59E0B, #F97316);
}

.widget-card.info {
    background: linear-gradient(135deg, #8B5CF6, #A855F7);
}

.widget-card.success {
    background: linear-gradient(135deg, #10B981, #059669);
}

.widget-card.danger {
    background: linear-gradient(135deg, #EF4444, #DC2626);
}

.widget-icon {
    font-size: 2.5rem;
    opacity: 0.9;
    margin-bottom: 1rem;
}

.widget-number {
    font-size: 2.25rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
}

.widget-label {
    font-size: 0.875rem;
    opacity: 0.9;
    font-weight: 500;
}

@media (max-width: 767.98px) {
    .widget-card {
        padding: 1rem;
    }
    .widget-number {
        font-size: 1.75rem;
    }
    .widget-icon {
        font-size: 2rem;
    }
}

/* Tables */
.table {
    background-color: white;
    border-radius: var(--border-radius-sm);
    overflow: hidden;
    box-shadow: var(--shadow-sm);
}

.table th {
    background-color: var(--sidebar-light);
    border-bottom: 2px solid var(--border-light);
    font-weight: 600;
    font-size: 0.875rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    color: var(--text-dark);
    padding: 1rem;
}

.table td {
    padding: 1rem;
    vertical-align: middle;
    border-bottom: 1px solid var(--border-light);
}

.table tr:hover {
    background-color: rgba(37, 99, 235, 0.02);
}

.table-responsive {
    overflow-x: auto;
    -webkit-overflow-scrolling: touch; /* Smooth scrolling on mobile */
}

@media (max-width: 767.98px) {
    .table th, .table td {
        padding: 0.75rem;
        font-size: 0.8125rem;
    }
}

/* DataTables Customization */
.dataTables_wrapper .dataTables_length select,
.dataTables_wrapper .dataTables_filter input {
    border: 1px solid var(--border-light);
    border-radius: var(--border-radius-sm);
    padding: 0.5rem 0.75rem;
}

.dataTables_wrapper .dataTables_filter input {
    margin-left: 0.5rem;
}

.dataTables_wrapper .dataTables_length,
.dataTables_wrapper .dataTables_filter,
.dataTables_wrapper .dataTables_info,
.dataTables_wrapper .dataTables_paginate {
    margin-bottom: 1rem;
}

.dataTables_wrapper .dataTables_paginate .paginate_button {
    padding: 0.5rem 0.75rem;
    margin: 0 0.125rem;
    border-radius: var(--border-radius-sm);
    border: 1px solid var(--border-light);
    background: white;
    color: var(--text-dark) !important;
}

.dataTables_wrapper .dataTables_paginate .paginate_button:hover {
    background: var(--primary-blue) !important;
    color: white !important;
    border-color: var(--primary-blue);
}

.dataTables_wrapper .dataTables_paginate .paginate_button.current {
    background: var(--primary-blue) !important;
    color: white !important;
    border-color: var(--primary-blue);
}

/* Buttons */
.btn {
    border-radius: var(--border-radius-sm);
    font-weight: 500;
    padding: 0.625rem 1.25rem;
    transition: all 0.2s ease;
    border-width: 1px;
}

.btn-primary {
    background-color: var(--primary-blue);
    border-color: var(--primary-blue);
}

.btn-primary:hover, .btn-primary:focus {
    background-color: #1D4ED8;
    border-color: #1D4ED8;
    box-shadow: 0 0 0 0.25rem rgba(37, 99, 235, 0.25);
}

.btn-success {
    background-color: var(--secondary-teal);
    border-color: var(--secondary-teal);
}

.btn-success:hover, .btn-success:focus {
    background-color: #0F766E;
    border-color: #0F766E;
    box-shadow: 0 0 0 0.25rem rgba(20, 184, 166, 0.25);
}

.btn-sm {
    padding: 0.375rem 0.75rem;
    font-size: 0.875rem;
}

@media (max-width: 767.98px) {
    .btn {
        padding: 0.5rem 1rem;
    }
}

/* Form Controls */
.form-control, .form-select {
    border: 1px solid var(--border-light);
    border-radius: var(--border-radius-sm);
    padding: 0.75rem;
    transition: all 0.2s ease;
    background-color: white;
}

.form-control:focus, .form-select:focus {
    border-color: var(--primary-blue);
    box-shadow: 0 0 0 0.25rem rgba(37, 99, 235, 0.25);
}

.form-label {
    font-weight: 600;
    color: var(--text-dark);
    margin-bottom: 0.5rem;
}

/* Form Layout */
.form-section {
    background: white;
    padding: 1.5rem;
    border-radius: var(--border-radius);
    box-shadow: var(--shadow-sm);
    margin-bottom: 1.5rem;
}

.form-section h5 {
    margin-bottom: 1.25rem;
    color: var(--text-dark);
    font-weight: 600;
    padding-bottom: 0.75rem;
    border-bottom: 1px solid var(--border-light);
}

@media (max-width: 767.98px) {
    .form-section {
        padding: 1rem;
    }
    .form-section h5 {
        font-size: 1rem;
    }
}

/* Badges and Status */
.badge {
    font-weight: 500;
    padding: 0.5rem 0.75rem;
    border-radius: var(--border-radius-sm);
}

.status-active {
    background-color: #D1FAE5;
    color: #065F46;
}

.status-inactive {
    background-color: #F3F4F6;
    color: #6B7280;
}

/* Action Buttons */
.action-buttons .btn {
    margin-right: 0.5rem;
    margin-bottom: 0.5rem;
}

@media (max-width: 767.98px) {
    .action-buttons .btn {
        width: 100%;
        margin-right: 0;
    }
}

/* Login Page */
.login-container {
    max-width: 420px;
    margin: 10vh auto;
    padding: 2.5rem;
    background-color: white;
    border-radius: var(--border-radius);
    box-shadow: var(--shadow-lg);
}

.login-container h2 {
    color: var(--text-dark);
    text-align: center;
    margin-bottom: 2rem;
    font-weight: 600;
}

@media (max-width: 575.98px) {
    .login-container {
        padding: 1.5rem;
    }
    .login-container h2 {
        font-size: 1.25rem;
    }
}

/* Toggle Switches */
.form-switch .form-check-input {
    width: 3rem;
    height: 1.5rem;
    border-radius: 3rem;
}

.form-switch .form-check-input:checked {
    background-color: var(--primary-blue);
    border-color: var(--primary-blue);
}

/* Export Button */
.export-btn {
    background-color: #059669;
    border-color: #059669;
    color: white;
}

.export-btn:hover {
    background-color: #047857;
    border-color: #047857;
}

/* Dark Mode Toggle (Optional) */
.dark-mode-toggle {
    position: fixed;
    bottom: 2rem;
    right: 2rem;
    z-index: 1000;
    background-color: var(--primary-blue);
    color: white;
    border: none;
    width: 3rem;
    height: 3rem;
    border-radius: 50%;
    box-shadow: var(--shadow-lg);
    transition: all 0.3s ease;
}

.dark-mode-toggle:hover {
    transform: scale(1.1);
    background-color: #1D4ED8;
}

@media (max-width: 575.98px) {
    .dark-mode-toggle {
        bottom: 1rem;
        right: 1rem;
    }
}

/* Page Headers */
.page-header {
    background: white;
    padding: 1.5rem;
    border-radius: var(--border-radius);
    box-shadow: var(--shadow-sm);
    margin-bottom: 1.5rem;
}

.page-header h1 {
    margin: 0;
    color: var(--text-dark);
    font-weight: 600;
    font-size: 1.5rem;
}

.page-header .breadcrumb {
    background: none;
    padding: 0;
    margin: 0.5rem 0 0 0;
}

@media (max-width: 575.98px) {
    .page-header {
        padding: 1rem;
    }
    .page-header h1 {
        font-size: 1.25rem;
    }
}

/* Statistics Cards */
.stat-card {
    background: white;
    border-radius: var(--border-radius);
    padding: 1.5rem;
    box-shadow: var(--shadow-sm);
    border-left: 4px solid var(--primary-blue);
    transition: all 0.2s ease;
}

.stat-card:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-md);
}

.stat-number {
    font-size: 2rem;
    font-weight: 700;
    color: var(--primary-blue);
    margin-bottom: 0.25rem;
}

.stat-label {
    color: var(--text-muted);
    font-weight: 500;
    font-size: 0.875rem;
}

@media (max-width: 767.98px) {
    .stat-card {
        padding: 1rem;
    }
    .stat-number {
        font-size: 1.5rem;
    }
    .stat-label {
        font-size: 0.8125rem;
    }
}

/* Rich Text Editor Styling */
.note-editor {
    border: 1px solid var(--border-light);
    border-radius: var(--border-radius-sm);
}

.note-toolbar {
    background-color: var(--sidebar-light);
    border-bottom: 1px solid var(--border-light);
}

/* Image Preview */
.img-preview {
    max-width: 200px;
    max-height: 200px;
    border-radius: var(--border-radius-sm);
    box-shadow: var(--shadow-sm);
    margin-top: 0.75rem;
}

/* Utility Classes */
.text-muted-custom {
    color: var(--text-muted);
}

.bg-light-custom {
    background-color: var(--bg-light);
}

.border-light-custom {
    border-color: var(--border-light);
}

/* Animation */
@keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
}

.fade-in {
    animation: fadeIn 0.5s ease-out;
}

/* Enhanced Table Actions */
.table-actions {
    display: flex;
    gap: 0.5rem;
    align-items: center;
}

.table-actions .btn {
    padding: 0.375rem 0.75rem;
}

/* Loading States */
.loading {
    position: relative;
    pointer-events: none;
    opacity: 0.6;
}

.loading::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 2rem;
    height: 2rem;
    border: 2px solid var(--border-light);
    border-top: 2px solid var(--primary-blue);
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: translate(-50%, -50%) rotate(0deg); }
    100% { transform: translate(-50%, -50%) rotate(360deg); }
}

/* Custom Scrollbar */
::-webkit-scrollbar {
    width: 6px;
}

::-webkit-scrollbar-track {
    background: var(--sidebar-light);
}

::-webkit-scrollbar-thumb {
    background: var(--text-muted);
    border-radius: 3px;
}

::-webkit-scrollbar-thumb:hover {
    background: var(--primary-blue);
}


====== static/uploads/ ======
total 752K
-rwxrwxr-x 1 ubuntu ubuntu 211K Aug 27 10:30 22.png
-rw-rw-r-- 1 ubuntu ubuntu 137K Aug 30 17:28 Detailed_AWS_Alchem_Pharma.pdf
-rw-rw-r-- 1 ubuntu ubuntu 159K Aug 27 10:31 Screenshot_3.png
-rw-rw-r-- 1 ubuntu ubuntu 238K Aug 26 18:10 Screenshot_4.png
